<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 03 May 2025 16:28:30 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: pagePark</title>
		<dateCreated>Sun, 21 Dec 2014 22:33:23 GMT</dateCreated>
		<dateModified>Sat, 03 May 2025 16:28:29 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 4, 26, 70, 76, 79, 83, 84, 85, 131, 132, 152</expansionState>
		<vertScrollState>64</vertScrollState>
		<windowTop>73</windowTop>
		<windowLeft>897</windowLeft>
		<windowBottom>1325</windowBottom>
		<windowRight>2094</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/pagepark/">
			<outline text="worknotes.md" created="Tue, 15 Aug 2023 21:37:16 GMT">
				<outline text="#### 5/3/25; 12:13:13 PM by DW" created="Sat, 03 May 2025 16:13:13 GMT">
					<outline text="I'm having difficulty with Caddy, it's sending attempts to connect via WebSockets to WordLand. It only handles HTTP." created="Sat, 03 May 2025 16:13:14 GMT"/>
					<outline text="Added new config value -- flWebsocketsIsError, defaults false. Don't want to break any apps that do handle WS requests. " created="Sat, 03 May 2025 16:14:50 GMT"/>
					</outline>
				<outline text="#### 8/15/24; 12:23:14 PM by DW" created="Thu, 15 Aug 2024 16:23:13 GMT">
					<outline text="Prevented a crashing bug in processResponse." created="Thu, 15 Aug 2024 16:23:14 GMT"/>
					</outline>
				<outline text="#### 2/5/24; 11:46:02 AM by DW" created="Mon, 05 Feb 2024 16:45:58 GMT">
					<outline text="I wish there were a way to configure the domains folder, but it isn't there. So I'm using a symlink." created="Mon, 05 Feb 2024 16:46:03 GMT">
						<outline text="here's the directory I want to link to" created="Mon, 05 Feb 2024 16:46:19 GMT">
							<outline text="~/Dropbox/Miami/pagePark/domains" created="Mon, 05 Feb 2024 16:46:30 GMT"/>
							</outline>
						<outline text="and the directory I want to link from" created="Mon, 05 Feb 2024 16:46:39 GMT">
							<outline text="~/taos/pagepark/domains" created="Mon, 05 Feb 2024 16:46:48 GMT"/>
							</outline>
						<outline text="apparently the command is" created="Mon, 05 Feb 2024 16:47:58 GMT">
							<outline text="ln -s ~/Dropbox/Miami/pagePark/domains ~/taos/pagepark/domains" created="Mon, 05 Feb 2024 16:48:04 GMT"/>
							</outline>
						</outline>
					</outline>
				<outline text="#### 1/8/24; 9:38:20 AM by DW" created="Mon, 08 Jan 2024 14:38:20 GMT">
					<outline text="PagePark now works with specs for news products using JSON in addition to OPML.  " created="Mon, 08 Jan 2024 14:38:21 GMT"/>
					<outline text="The data supplied is basically the same, the format is different." created="Mon, 08 Jan 2024 14:39:27 GMT"/>
					<outline text="An &lt;a href=&quot;http://scripting.com/code/newsproducthome/newsscriptingcom2.json&quot;&gt;example&lt;/a&gt; of a JSON-spec. Also it's explained on the &lt;a href=&quot;https://docs.feedland.dev/extras.md#json-specified-news-products&quot;&gt;FeedLand docs&lt;/a&gt; site. " created="Mon, 08 Jan 2024 14:44:31 GMT"/>
					<outline text="&lt;%includeExample (&quot;newsProductGlue2&quot;)%&gt;"/>
					<outline text="The big difference is that instead of a `urlTemplate` value, there's `urlNewsProductSpec`." created="Mon, 08 Jan 2024 14:43:18 GMT"/>
					</outline>
				<outline text="#### 12/27/23; 1:05:46 PM by DW" created="Wed, 27 Dec 2023 18:05:46 GMT">
					<outline text="Running news products for FeedLand. " created="Wed, 27 Dec 2023 18:05:47 GMT"/>
					<outline text="We were and still are using filter.js to hook up newsproducts via a PagePark domain. " created="Thu, 28 Dec 2023 14:28:53 GMT"/>
					<outline text="I wanted to simplify the connecting code and make it part of PagePark." created="Thu, 28 Dec 2023 14:31:50 GMT"/>
					<outline text="To invoke a newsproduct: " created="Thu, 28 Dec 2023 14:32:19 GMT"/>
					<outline text="&lt;%includeExample (&quot;newsProductGlue&quot;)%&gt;"/>
					<outline text="This will change, as we use JSON in place of OPML for templates. " created="Thu, 28 Dec 2023 14:33:00 GMT"/>
					<outline text="Some of the terminology may change as well." created="Thu, 28 Dec 2023 14:33:22 GMT"/>
					</outline>
				<outline text="#### 10/2/23; 10:52:58 AM by DW" created="Mon, 02 Oct 2023 14:52:57 GMT">
					<outline text="We can now serve from private GitHub repos. " created="Mon, 02 Oct 2023 14:52:59 GMT"/>
					<outline text="To do so, add an &lt;i&gt;accessToken&lt;/i&gt; value to your &lt;i&gt;githubServeFrom&lt;/i&gt; object in config.json." created="Mon, 02 Oct 2023 14:53:09 GMT"/>
					<outline text="When we get the page text from GitHub that will be in the Authorization header in the request. " created="Mon, 02 Oct 2023 14:53:52 GMT"/>
					<outline text="An example of a PagePark &lt;a href=&quot;https://gist.github.com/scripting/3f43bd5b7b5b05dad62214102085c2aa&quot;&gt;config.json file&lt;/a&gt; to access a private repo via the web."/>
					</outline>
				<outline text="#### 9/20/23; 8:53:50 AM by DW" created="Wed, 20 Sep 2023 12:53:49 GMT">
					<outline text="Another pagepark crash, this time on peabody, very reproducible. If you go to https://this.how/ -- it crashes. Happens in opmltojs package. I'm going to try setting up a local test and see if I can reproduce here. " created="Wed, 20 Sep 2023 12:53:50 GMT"/>
					<outline text="The problem was in opmltojs package, it the xml parser wasn't returning an error when it wasn't able to parse an OPML file, so I added an extra check for a null value returned, and the crash went away. " created="Wed, 20 Sep 2023 13:52:30 GMT"/>
					<outline text="Now it's good question why the parser couldn't handle it because it looks to be valid xml, it's the index.opml file for the this.how website. " created="Wed, 20 Sep 2023 13:53:21 GMT"/>
					</outline>
				<outline text="#### 8/15/23; 5:37:20 PM by DW" created="Tue, 15 Aug 2023 21:37:19 GMT">
					<outline text="if pagepark crashes on a machine that's running caddy, all the apps launch but the ports are already in use, so the keep launching and the machine effectively goes crazy. i found the problem by leaving a console window open, logging pagepark hits, and when the machine went nuts i scrolled back until i found the source. " created="Tue, 15 Aug 2023 21:38:31 GMT">
						<outline text="lowerhost = host.toLowerCase ()"/>
						</outline>
					<outline text="so i check first if host is undefined and set it to the empty string. " created="Tue, 15 Aug 2023 21:38:32 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;PagePark&quot;, "/>
					<outline text="&quot;description&quot;: &quot;A simple Node.js folder-based HTTP server that serves static and dynamic pages for domains.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.8.31&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node pagepark.js&quot;">
							<outline text="},"/>
							</outline>
						</outline>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot; : &quot;git&quot;,"/>
						<outline text="&quot;url&quot; : &quot;https://github.com/scripting/pagePark.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : { ">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;mime&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;daveopml&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;pagepark&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davediskspace&quot;: &quot;*&quot;,"/>
						<outline text="&quot;githubpub&quot;: &quot;*&quot;,"/>
						<outline text="&quot;pagepark&quot;: &quot;*&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;require-from-string&quot;: &quot;*&quot;,"/>
						<outline text="&quot;marked&quot;: &quot;3.0.8&quot;,"/>
						<outline text="&quot;child_process&quot;: &quot;*&quot;,"/>
						<outline text="&quot;forever&quot;: &quot;*&quot;,"/>
						<outline text="&quot;forever-monitor&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="pagepark.js">
				<outline text="var myProductName = &quot;PagePark&quot;, myVersion = &quot;0.8.31&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="/*  The MIT License (MIT)">
					<outline text="Copyright (c) 2014-2023 Dave Winer"/>
					<outline text=""/>
					<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"/>
					<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"/>
					<outline text="in the Software without restriction, including without limitation the rights"/>
					<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"/>
					<outline text="copies of the Software, and to permit persons to whom the Software is"/>
					<outline text="furnished to do so, subject to the following conditions:"/>
					<outline text=""/>
					<outline text="The above copyright notice and this permission notice shall be included in all"/>
					<outline text="copies or substantial portions of the Software."/>
					<outline text=""/>
					<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"/>
					<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"/>
					<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"/>
					<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"/>
					<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"/>
					<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"/>
					<outline text="SOFTWARE."/>
					<outline text=" "/>
					<outline text="structured listing: http://scripting.com/listings/pagepark.html"/>
					<outline text="*/"/>
					</outline>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const urlpack = require (&quot;url&quot;);" created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074"/>
				<outline text="const http = require (&quot;http&quot;);" created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549"/>
				<outline text="const marked = require (&quot;marked&quot;);"/>
				<outline text="const dns = require (&quot;dns&quot;);"/>
				<outline text="const mime = require (&quot;mime&quot;); //1/8/15 by DW" isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;); //6/7/17 by DW"/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;); //6/16/17 by DW"/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); //9/29/17 by DW"/>
				<outline text="const s3 = require (&quot;daves3&quot;); //6/4/18 by DW"/>
				<outline text="const githubpub = require (&quot;githubpub&quot;); //12/3/19 by DW"/>
				<outline text="const freeDiskSpace = require (&quot;davediskspace&quot;); //12/20/19 by DW"/>
				<outline text="const requireFromString = require (&quot;require-from-string&quot;); //5/9/20 by DW"/>
				<outline text="const thePackage = require (&quot;./lib/pageparkpackage.js&quot;); //6/27/20 by DW -- for testing" isComment="true"/>
				<outline text="const thePackage = require (&quot;pagepark&quot;); //5/6/20 by DW"/>
				<outline text=""/>
				<outline text="var pageparkPrefs = {">
					<outline text="myPort: 1339, //1/8/15 by DW -- was 80, see note in readme.md"/>
					<outline text="flWebsocketEnabled: false, websocketPort: 1340, //9/29/17 by DW"/>
					<outline text="indexFilename: &quot;index&quot;,"/>
					<outline text="flProcessScriptFiles: false, extScriptFiles: &quot;js&quot;, //12/4/19 by DW -- breaking change"/>
					<outline text="flProcessMarkdownFiles: true, extMarkdownFiles: &quot;md&quot;, //5/5/15 by DW"/>
					<outline text="flProcessOpmlFiles: true, extOpmlFiles: &quot;opml&quot;, //6/23/15 by DW"/>
					<outline text="error404File: &quot;prefs/error.html&quot;, //7/16/15 by DW"/>
					<outline text="legalPathChars: &quot;&quot;, //7/19/15 by DW,"/>
					<outline text="flCacheTemplatesLocally: false, //12/21/19 by DW -- switched the default from true"/>
					<outline text="urlDefaultMarkdownTemplate: &quot;http://scripting.com/code/pagepark/templates/markdown/template.txt&quot;, "/>
					<outline text="urlDefaultOpmlTemplate: &quot;http://scripting.com/code/pagepark/templates/opml/template.txt&quot;,"/>
					<outline text="urlDefaultErrorPage: &quot;http://scripting.com/code/pagepark/prefs/error.html&quot;, "/>
					<outline text="flUnicasePaths: false, //11/7/17 by DW"/>
					<outline text="defaultType: &quot;text/html&quot;, //7/21/18 by DW"/>
					<outline text="flHiddenFilesCheck: true, //12/9/19 by DW -- check if file or folder name begins with _"/>
					<outline text="ctGithubCacheSecs: 3600, //12/13/19 by DW -- one hour"/>
					<outline text="flRunChronologicalScripts: false, //5/13/20 by DW"/>
					<outline text="flRunPersistentScripts: false, //5/13/20 by DW"/>
					<outline text="flCliPortEnabled: false, cliPort: 1349, //5/27/20 by DW"/>
					<outline text="defaultDomanFolderName: &quot;default&quot;, //7/5/21 by DW" created="Mon, 05 Jul 2021 14:28:33 GMT"/>
					<outline text="defaultExtension: &quot;&quot;, //7/25/21 by DW" created="Sun, 25 Jul 2021 16:02:25 GMT"/>
					<outline text="flServeConfigJson: false, //7/28/21 by DW" created="Wed, 28 Jul 2021 17:10:32 GMT"/>
					<outline text="flWebsocketsIsError: false //5/3/25 by DW" created="Sat, 03 May 2025 16:14:24 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text="var pageparkStats = {">
					<outline text="ctStarts: 0, "/>
					<outline text="whenLastStart: new Date (0),"/>
					<outline text="ctHits: 0, ctHitsToday: 0, ctHitsSinceStart: 0,"/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text="hitsByDomain: {}"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="var fnamePrefs = &quot;prefs/prefs.json&quot;;"/>
				<outline text="var fnameStats = &quot;prefs/stats.json&quot;, flStatsDirty = false;"/>
				<outline text="var domainsPath = &quot;domains/&quot;;"/>
				<outline text="var configFname = &quot;/config.json&quot;;"/>
				<outline text="var filterFname = &quot;/filter.js&quot;;"/>
				<outline text="var mdTemplatePath = &quot;prefs/mdTemplate.txt&quot;;"/>
				<outline text="var opmlTemplatePath = &quot;prefs/opmlTemplate.txt&quot;;"/>
				<outline text="var folderPathFromEnv = process.env.pageparkFolderPath; //1/3/15 by DW"/>
				<outline text="var flEveryMinuteScheduled = false; //7/17/17 by DW"/>
				<outline text=""/>
				<outline text="//websockets -- 9/29/17 by DW">
					<outline text="var theWsServer = undefined;"/>
					<outline text="function notifySocketSubscribers (verb, jstruct) {">
						<outline text="if (theWsServer !== undefined) {">
							<outline text="var ctUpdates = 0, now = new Date (), jsontext = &quot;&quot;;"/>
							<outline text="if (jstruct !== undefined) { //10/7/16 by DW">
								<outline text="jsontext = utils.jsonStringify (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="for (var i = 0; i &lt; theWsServer.connections.length; i++) {">
								<outline text="var conn = theWsServer.connections [i];"/>
								<outline text="if (conn.pageParkData !== undefined) { //it's one of ours">
									<outline text="try {">
										<outline text="conn.sendText (verb + &quot;\r&quot; + jsontext);"/>
										<outline text="conn.pageParkData.whenLastUpdate = now;"/>
										<outline text="conn.pageParkData.ctUpdates++;"/>
										<outline text="ctUpdates++;"/>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {">
										<outline text="console.log (&quot;notifySocketSubscribers: socket #&quot; + i + &quot;: error updating&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (ctUpdates &gt; 0) {" isComment="true">
								<outline text="console.log (&quot;notifySocketSubscribers: &quot; + ctUpdates + &quot; sockets were updated.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {">
						<outline text="if (pageparkPrefs.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="theWsServer = websocket.createServer (function (conn) {">
									<outline text="conn.pageParkData = {">
										<outline text="whenLastUpdate: new Date (0),"/>
										<outline text="ctUpdates: 0"/>
										<outline text="};"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="theWsServer.listen (pageparkPrefs.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function httpReadUrl (url, callback) {" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (error, response, body) {">
						<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
							<outline text="callback (body) "/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function getFullFilePath (relpath) { //1/3/15 by DW">
					<outline text="var folderpath = folderPathFromEnv;"/>
					<outline text="if (folderpath == undefined) { //the environment variable wasn't specified">
						<outline text="return (relpath);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (!utils.endsWith (folderpath, &quot;/&quot;)) {">
						<outline text="folderpath += &quot;/&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (utils.beginsWith (relpath, &quot;/&quot;)) {">
						<outline text="relpath = utils.stringDelete (relpath, 1, 1);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (folderpath + relpath);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getTemplate (myTemplatePath, urlDefaultTemplate, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="6/17/17; 11:09:48 AM by DW">
							<outline text="Support new pageParkPrefs.flCacheTemplatesLocally pref."/>
							</outline>
						<outline text="12/25/14; 1:32:03 PM by DW">
							<outline text="Get the template text. ">
								<outline text="Try to read the file, if it's not there, read the default over the web, save it to the file. "/>
								</outline>
							</outline>
						</outline>
					<outline text="if (pageparkPrefs.flCacheTemplatesLocally) {">
						<outline text="var f = getFullFilePath (myTemplatePath);"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;getTemplate: error reading the file &quot; + err.message);" isComment="true"/>
								<outline text="httpReadUrl (urlDefaultTemplate, function (s) {">
									<outline text="fs.writeFile (myTemplatePath, s, function (err) {">
										<outline text="if (callback != undefined) {">
											<outline text="callback (s);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback != undefined) {">
									<outline text="callback (data.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="httpReadUrl (urlDefaultTemplate, function (s) {">
							<outline text="if (callback != undefined) {">
								<outline text="callback (s);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getMarkdownTitle (mdtext) { //12/31/19 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/31/19; 11:12:26 AM by DW">
							<outline text="Look in the first 5 lines in the file for a line that begins with &quot;# &quot;. Assume that's the title of the page."/>
							</outline>
						</outline>
					<outline text="var linenum = 1;"/>
					<outline text="for (var i = 1; i &lt;= 5; i++) {">
						<outline text="var s = utils.trimWhitespace (utils.stringNthField (mdtext, &quot;\n&quot;, i));"/>
						<outline text="if (utils.beginsWith (s, &quot;# &quot;)) {">
							<outline text="return (utils.stringDelete (s, 1, 2));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (utils.beginsWith (mdtext, &quot;# &quot;)) {" isComment="true">
						<outline text="title = utils.stringNthField (mdtext, &quot;\n&quot;, 1);"/>
						<outline text="title = utils.stringDelete (title, 1, 2);"/>
						<outline text="title = utils.trimWhitespace (title);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined);"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 03 May 2025 15:44:46 GMT"/>
				<outline text="function handleHttpRequest (httpRequest, httpResponse) {">
					<outline text="var config; "/>
					<outline text="var now = new Date ();"/>
					<outline text="var logInfo = { //2/17/18 by DW">
						<outline text="when: now"/>
						<outline text="};"/>
						</outline>
					<outline text="" created="Wed, 27 Dec 2023 21:07:42 GMT"/>
					<outline text="" created="Sat, 03 May 2025 15:45:04 GMT"/>
					<outline text="function isWebsocketRequest () { //5/3/25 by DW" created="Sat, 03 May 2025 15:45:04 GMT">
						<outline text="const headers = httpRequest.headers;" created="Sat, 03 May 2025 15:45:47 GMT"/>
						<outline text="console.log (&quot;\nisWebsocketRequest&quot;);" created="Sat, 03 May 2025 16:26:02 GMT"/>
						<outline text="for (var x in headers) {" created="Sat, 03 May 2025 16:26:30 GMT">
							<outline text="console.log (&quot;\t&quot; + x + &quot; == &quot; + headers [x]);" created="Sat, 03 May 2025 16:26:36 GMT"/>
							<outline text="}" created="Sat, 03 May 2025 16:26:35 GMT"/>
							</outline>
						<outline text="function getHeader (name) {" created="Sat, 03 May 2025 15:50:50 GMT">
							<outline text="if (headers [name] === undefined) {" created="Sat, 03 May 2025 15:51:02 GMT">
								<outline text="return (&quot;&quot;);" created="Sat, 03 May 2025 15:51:24 GMT"/>
								<outline text="}" created="Sat, 03 May 2025 15:51:27 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 03 May 2025 15:51:28 GMT">
								<outline text="return (utils.stringLower (headers [name]));" created="Sat, 03 May 2025 15:51:30 GMT"/>
								<outline text="}" created="Sat, 03 May 2025 15:51:33 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 May 2025 15:50:57 GMT"/>
							</outline>
						<outline text="if (getHeader (&quot;upgrade&quot;) === &quot;websocket&quot;) {" created="Sat, 03 May 2025 15:50:21 GMT">
							<outline text="if (utils.stringContains (getHeader (&quot;connection&quot;), &quot;upgrade&quot;)) {" created="Sat, 03 May 2025 15:55:03 GMT">
								<outline text="if (headers [&quot;sec-websocket-key&quot;] !== undefined) {" created="Sat, 03 May 2025 15:59:14 GMT">
									<outline text="console.log (&quot;true&quot;);" created="Sat, 03 May 2025 16:27:16 GMT"/>
									<outline text="return (true);" created="Sat, 03 May 2025 16:00:05 GMT"/>
									<outline text="}" created="Sat, 03 May 2025 15:59:28 GMT"/>
									</outline>
								<outline text="}" created="Sat, 03 May 2025 15:56:08 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 May 2025 15:50:47 GMT"/>
							</outline>
						<outline text="console.log (&quot;false&quot;);" created="Sat, 03 May 2025 16:27:16 GMT"/>
						<outline text="return (false);" created="Sat, 03 May 2025 16:00:11 GMT"/>
						<outline text="}" created="Sat, 03 May 2025 15:45:22 GMT"/>
						</outline>
					<outline text="" created="Sat, 03 May 2025 15:45:04 GMT"/>
					<outline text="" created="Sat, 03 May 2025 15:45:04 GMT"/>
					<outline text="function runNewsProduct (options, callback) { //12/27/23 by DW" created="Wed, 27 Dec 2023 18:11:07 GMT">
						<outline text="Changes" isComment="true" created="Wed, 27 Dec 2023 20:35:09 GMT">
							<outline text="12/28/23; 10:24:32 AM by DW" created="Thu, 28 Dec 2023 15:24:32 GMT">
								<outline text="If options.urlNewsProductSpec is defined, we send a slightly different message to the server. " created="Thu, 28 Dec 2023 15:24:33 GMT"/>
								</outline>
							<outline text="12/27/23; 3:35:12 PM by DW" created="Wed, 27 Dec 2023 20:35:11 GMT">
								<outline text="We serve the home page from the url / -- anything else we handle specially. " created="Wed, 27 Dec 2023 20:35:13 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;runNewsProduct&quot;);" isComment="true" created="Wed, 27 Dec 2023 18:11:25 GMT"/>
						<outline text="const url = utils.stringNthField (httpRequest.url, &quot;?&quot;, 1);" created="Thu, 28 Dec 2023 02:18:57 GMT"/>
						<outline text="if (url == &quot;/&quot;) {" created="Wed, 27 Dec 2023 20:33:35 GMT">
							<outline text="function encode (s) {" created="Wed, 27 Dec 2023 18:49:55 GMT">
								<outline text="return (encodeURIComponent (s));" created="Wed, 27 Dec 2023 18:50:00 GMT"/>
								<outline text="}" created="Wed, 27 Dec 2023 18:49:59 GMT"/>
								</outline>
							<outline text="" created="Thu, 28 Dec 2023 15:25:37 GMT"/>
							<outline text="var urlServer = options.urlServer + &quot;?app=&quot; + encode (options.urlApp);" created="Fri, 30 Sep 2022 15:16:56 GMT"/>
							<outline text="if (options.urlNewsProductSpec === undefined) { //12/28/23 by DW" created="Thu, 28 Dec 2023 15:25:37 GMT">
								<outline text="urlServer += &quot;&amp;template=&quot; + encode (options.urlTemplate);" created="Thu, 28 Dec 2023 15:26:59 GMT"/>
								<outline text="}" created="Thu, 28 Dec 2023 15:25:59 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 28 Dec 2023 15:26:00 GMT">
								<outline text="urlServer += &quot;&amp;spec=&quot; + encode (options.urlNewsProductSpec);" created="Thu, 28 Dec 2023 15:26:59 GMT"/>
								<outline text="}" created="Thu, 28 Dec 2023 15:26:02 GMT"/>
								</outline>
							<outline text="request (urlServer, function (err, response, htmltext) {">
								<outline text="if (err) {">
									<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if ((response.statusCode &gt;= 200) &amp;&amp; (response.statusCode &lt;= 299)) {" created="Fri, 15 Sep 2023 15:08:11 GMT">
										<outline text="httpRespond (200, &quot;text/html&quot;, htmltext);"/>
										<outline text="}" created="Fri, 15 Sep 2023 15:08:21 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 15 Sep 2023 15:08:22 GMT">
										<outline text="httpRespond (response.statusCode, &quot;text/plain&quot;, &quot;Error response from server == &quot; + response.statusCode);"/>
										<outline text="}" created="Fri, 15 Sep 2023 15:08:24 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Wed, 27 Dec 2023 20:33:49 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 27 Dec 2023 20:36:05 GMT">
							<outline text="switch (httpRequest.url) {" created="Wed, 27 Dec 2023 20:38:45 GMT">
								<outline text="case &quot;/favicon.ico&quot;:" created="Wed, 27 Dec 2023 20:39:02 GMT">
									<outline text="console.log (&quot;/favicon.ico&quot;);" isComment="true" created="Wed, 27 Dec 2023 20:42:19 GMT"/>
									<outline text="returnRedirect (&quot;//s3.amazonaws.com/scripting.com/publicfolder/misc/newsproductfavicon.ico&quot;, false);"/>
									<outline text="break;" created="Wed, 27 Dec 2023 20:39:10 GMT"/>
									</outline>
								<outline text="default: " created="Wed, 27 Dec 2023 20:39:36 GMT">
									<outline text="return404 ();" created="Wed, 27 Dec 2023 20:39:39 GMT"/>
									<outline text="break;" created="Wed, 27 Dec 2023 20:39:48 GMT"/>
									</outline>
								<outline text="}" created="Wed, 27 Dec 2023 20:38:50 GMT"/>
								</outline>
							<outline text="}" created="Wed, 27 Dec 2023 20:36:08 GMT"/>
							</outline>
						<outline text="}" created="Wed, 27 Dec 2023 18:11:13 GMT"/>
						</outline>
					<outline text="function getDiskSpace (callback) { //12/20/19 by DW">
						<outline text="var stats = new Object (); "/>
						<outline text="freeDiskSpace.get (stats, function () {">
							<outline text="stats.productName = myProductName;"/>
							<outline text="stats.version = myVersion;"/>
							<outline text="callback (undefined, stats);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getOpmlTemplate (callback) { //6/23/15 by DW">
						<outline text="Changes" isComment="true" created="Tue, 17 Aug 2021 20:54:56 GMT">
							<outline text="8/19/21; 8:55:10 AM by DW" created="Thu, 19 Aug 2021 12:55:09 GMT">
								<outline text="Changed pageparkPrefs.urlDefaultOpmlTemplate to config.urlDefaultOpmlTemplate. This explains why we couldn't set the template from config.json for outlines and could set it for markdown docs. " created="Thu, 19 Aug 2021 12:55:10 GMT"/>
								</outline>
							<outline text="8/17/21; 4:55:08 PM by DW" created="Tue, 17 Aug 2021 20:55:07 GMT">
								<outline text="If config.urlOpmlTemplate is specified, we must use that. It's coming from the website's config.json file. " created="Tue, 17 Aug 2021 20:55:08 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.urlOpmlTemplate !== undefined) { //8/17/21 by DW" created="Tue, 17 Aug 2021 20:54:56 GMT">
							<outline text="getTemplate (undefined, config.urlOpmlTemplate, callback);"/>
							<outline text="}" created="Tue, 17 Aug 2021 20:56:07 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 17 Aug 2021 20:56:08 GMT">
							<outline text="if (config.opmlTemplatePath !== undefined) {">
								<outline text="fs.readFile (config.opmlTemplatePath, function (err, data) {">
									<outline text="if (err) {">
										<outline text="getTemplate (opmlTemplatePath, config.urlDefaultOpmlTemplate, callback);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="getTemplate (opmlTemplatePath, pageparkPrefs.urlDefaultOpmlTemplate, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Tue, 17 Aug 2021 20:56:10 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getMarkdownTemplate (callback) {">
						<outline text="Changes" isComment="true" created="Tue, 17 Aug 2021 20:54:56 GMT">
							<outline text="8/17/21; 5:02:08 PM by DW" created="Tue, 17 Aug 2021 20:55:07 GMT">
								<outline text="If config.urlMarkdownTemplate is specified, we must use that. It's coming from the website's config.json file. " created="Tue, 17 Aug 2021 20:55:08 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.urlMarkdownTemplate !== undefined) { //8/17/21 by DW" created="Tue, 17 Aug 2021 21:02:34 GMT">
							<outline text="getTemplate (undefined, config.urlMarkdownTemplate, callback);"/>
							<outline text="}" created="Tue, 17 Aug 2021 21:02:42 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 17 Aug 2021 21:02:42 GMT">
							<outline text="if (config.mdTemplatePath !== undefined) {">
								<outline text="fs.readFile (config.mdTemplatePath, function (err, data) {">
									<outline text="if (err) {">
										<outline text="getTemplate (mdTemplatePath, config.urlDefaultMarkdownTemplate, callback);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="getTemplate (mdTemplatePath, config.urlDefaultMarkdownTemplate, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Tue, 17 Aug 2021 21:02:44 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function hasAcceptHeader (theHeader) {">
						<outline text="Changes" isComment="true">
							<outline text="6/24/15; 1:16:10 PM by DW">
								<outline text="header string looks like this: text/x-opml, */*" isComment="true"/>
								</outline>
							</outline>
						<outline text="if (httpRequest.headers.accept === undefined) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var split = httpRequest.headers.accept.split (&quot;, &quot;);"/>
							<outline text="for (var i = 0; i &lt; split.length; i++) {">
								<outline text="if (split [i] == theHeader) {">
									<outline text="return (true);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getDomainFolder (host, callback) { //5/11/15 by DW">
						<outline text="Changes" isComment="true">
							<outline text="7/5/21; 10:26:02 AM by DW" created="Mon, 05 Jul 2021 14:26:02 GMT">
								<outline text="If wildcard folder doesn't exist, try using the default folder (assuming it exists)." created="Mon, 05 Jul 2021 14:26:03 GMT"/>
								<outline text="Note that it's ok to send back a folder that doesn't exist, the caller is set up to handle that." created="Mon, 05 Jul 2021 14:34:25 GMT"/>
								</outline>
							<outline text="5/10/15; 6:33:28 PM by DW">
								<outline text="We check if the folder exists for this domain. If not we look for a wildcard folder for this domain.">
									<outline text="Example, looking for one.hello.com, if it doesn't exist, then return *.hello.com.">
										<outline text="If it doesn't exist, the request will fail."/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="var folder = getFullFilePath (domainsPath);"/>
						<outline text="var domainfolder = folder + host;"/>
						<outline text="fs.exists (domainfolder, function (flExists) {">
							<outline text="function useDefaultFolder () {" created="Mon, 05 Jul 2021 14:40:00 GMT">
								<outline text="var name = pageparkPrefs.defaultDomanFolderName;" created="Mon, 05 Jul 2021 14:45:51 GMT"/>
								<outline text="callback (folder + name, name);"/>
								<outline text="}" created="Mon, 05 Jul 2021 14:40:07 GMT"/>
								</outline>
							<outline text="if (flExists) {">
								<outline text="console.log (&quot;getDomainFolder: looking in normal folder == &quot; + domainfolder);" isComment="true"/>
								<outline text="callback (domainfolder, host);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (utils.stringCountFields (host, &quot;.&quot;) == 3) {">
									<outline text="var firstpart = utils.stringNthField (host, &quot;.&quot;, 1);"/>
									<outline text="var wildcardhost = &quot;*&quot; + utils.stringDelete (host, 1, firstpart.length);"/>
									<outline text="domainfolder = folder + wildcardhost;"/>
									<outline text="console.log (&quot;getDomainFolder: looking in wildcard folder == &quot; + domainfolder + &quot;, wildcardhost == &quot; + wildcardhost);" isComment="true"/>
									<outline text="fs.exists (domainfolder, function (flExists) { //7/5/21 by DW" created="Mon, 05 Jul 2021 14:26:32 GMT">
										<outline text="if (flExists) {" created="Mon, 05 Jul 2021 14:27:01 GMT">
											<outline text="callback (domainfolder, wildcardhost);"/>
											<outline text="}" created="Mon, 05 Jul 2021 14:27:02 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 05 Jul 2021 14:27:03 GMT">
											<outline text="useDefaultFolder ();" created="Mon, 05 Jul 2021 14:40:15 GMT"/>
											<outline text="}" created="Mon, 05 Jul 2021 14:27:05 GMT"/>
											</outline>
										<outline text="});" created="Mon, 05 Jul 2021 14:26:43 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="useDefaultFolder ();" created="Mon, 05 Jul 2021 14:40:36 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getConfigFile (host, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="12/10/19; 2:52:36 PM by DW">
								<outline text="Copy everything in pageparkPrefs into config before reading the config.json file. "/>
								<outline text="We were able to comment out everything that's now copied. "/>
								</outline>
							</outline>
						<outline text="var config = {">
							<outline text="urlSiteRedirect: undefined,"/>
							<outline text="urlSiteContents: undefined,"/>
							<outline text="fargoS3Path: undefined,"/>
							<outline text="s3Path: undefined,"/>
							<outline text="s3ServeFromPath: undefined,"/>
							<outline text="githubServeFrom: undefined,"/>
							<outline text="localPath: undefined"/>
							<outline text="flProcessScriptFiles: false, //12/4/19 by DW -- breaking change" isComment="true"/>
							<outline text="flProcessMarkdownFiles: true," isComment="true"/>
							<outline text="flProcessOpmlFiles: true," isComment="true"/>
							<outline text="extScriptFiles: pageparkPrefs.extScriptFiles," isComment="true"/>
							<outline text="extMarkdownFiles: pageparkPrefs.extMarkdownFiles," isComment="true"/>
							<outline text="extOpmlFiles: pageparkPrefs.extOpmlFiles" isComment="true"/>
							<outline text="};"/>
							</outline>
						<outline text="for (var x in pageparkPrefs) { //12/10/19 by DW">
							<outline text="config [x] = pageparkPrefs [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="var f = getFullFilePath (domainsPath) + host + configFname;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="callback (config);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());" created="Tue, 11 Jun 2013 13:43:44 GMT" pgfnum="25734"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="callback (config);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;getConfigFile: error reading &quot; + configFname + &quot; file for host &quot; + host + &quot;. &quot; + err.message);"/>
									<outline text="callback (config);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" isComment="true"/>
					<outline text="function runFilterScript (host, callback) { //3/23/20 by DW">
						<outline text="Changes" isComment="true" created="Mon, 21 Jun 2021 15:52:00 GMT">
							<outline text="6/21/21; 11:52:03 AM by DW" created="Mon, 21 Jun 2021 15:52:01 GMT">
								<outline text="Add httpResponse to the options object. Otherwise how is the plug-in supposed to return a response?" created="Mon, 21 Jun 2021 15:52:03 GMT"/>
								</outline>
							</outline>
						<outline text="var f = getFullFilePath (domainsPath) + host + filterFname;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="callback (false); //file doesn't exist -- we didn't run the filter script"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="const options = {">
									<outline text="httpRequest,"/>
									<outline text="httpResponse, //6/21/21 by DW" created="Mon, 21 Jun 2021 15:52:32 GMT"/>
									<outline text="serveLocalFile: function (f) {">
										<outline text="console.log (&quot;serveLocalFile (&quot; + f + &quot;)&quot;);"/>
										<outline text="serveFile (f, config);"/>
										<outline text="},"/>
										</outline>
									<outline text="runNewsProduct //12/27/23 by DW" created="Wed, 27 Dec 2023 18:10:25 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="try {">
									<outline text="thePackage.runJavaScriptCode (f, options, callback);"/>
									<outline text="runTheFilter (f, data, options, callback);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (true); //we handled it"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function runNewsProduct (host, callback) { //12/27/23 by DW" isComment="true" created="Wed, 27 Dec 2023 18:00:52 GMT">
						<outline text="var f = getFullFilePath (domainsPath) + host + newsproductFname;"/>
						<outline text="fs.readFile (f, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="callback (false); //file doesn't exist -- we didn't run the filter script"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var jstruct;" created="Wed, 27 Dec 2023 18:02:07 GMT"/>
								<outline text="try {" created="Wed, 27 Dec 2023 18:02:07 GMT">
									<outline text="jstruct = JSON.parse (jsontext);" created="Wed, 27 Dec 2023 18:02:26 GMT"/>
									<outline text="}" created="Wed, 27 Dec 2023 18:02:11 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Wed, 27 Dec 2023 18:02:12 GMT">
									<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
									<outline text="callback (true); //we handled it"/>
									<outline text="return;" created="Wed, 27 Dec 2023 18:03:35 GMT"/>
									<outline text="}" created="Wed, 27 Dec 2023 18:02:16 GMT"/>
									</outline>
								<outline text="thePackage.serveNewsProduct (jstruct, httpRequest, httpResponse);" created="Wed, 27 Dec 2023 18:04:11 GMT"/>
								<outline text="callback (true); //we handled it"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 27 Dec 2023 18:01:08 GMT"/>
						</outline>
					<outline text="" isComment="true"/>
					<outline text="function runTheFilter (f, scripttext, options) {" isComment="true">
						<outline text="const system = {">
							<outline text="};"/>
							</outline>
						<outline text="const localStorage = {">
							<outline text="};"/>
							</outline>
						<outline text="var leftcode = &quot;module.exports = function (options, localStorage, system) {&quot;, rightcode = &quot;}&quot;;"/>
						<outline text="var code = leftcode + scripttext.toString () + rightcode;"/>
						<outline text="requireFromString (code) (options, localStorage, system);"/>
						<outline text="}"/>
						</outline>
					<outline text="function runFilterScript (host, callback) { //3/23/20 by DW" isComment="true">
						<outline text="var f = getFullFilePath (domainsPath) + host + filterFname;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="callback (false); //file doesn't exist -- we didn't run the filter script"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="const options = {">
										<outline text="httpRequest,"/>
										<outline text="serveLocalFile: function (f) {">
											<outline text="console.log (&quot;serveLocalFile (&quot; + f + &quot;)&quot;);" isComment="true"/>
											<outline text="serveFile (f, config);"/>
											<outline text="}"/>
											</outline>
										<outline text="};"/>
										</outline>
									<outline text="const filterfile = __dirname + &quot;/&quot; + f;"/>
									<outline text="if (require.cache [filterfile] !== undefined) {">
										<outline text="delete require.cache [filterfile];"/>
										<outline text="}"/>
										</outline>
									<outline text="require (filterfile).filter (options, function (err, httpResponse) {">
										<outline text="if (err) {">
											<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
											<outline text="callback (true); //we handled it"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="if (httpResponse.flNotHandled) { //the plugin doesn't want this, let other functions in pagePark have a try">
												<outline text="callback (false);"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="httpRespond (httpResponse.code, httpResponse.type, httpResponse.val);"/>
												<outline text="callback (true); //we handled it"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
									<outline text="callback (true); //we handled it"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpRespond (code, type, val, headers) {">
						<outline text="Changes" isComment="true">
							<outline text="7/20/18; 1:19:08 PM by DW">
								<outline text="We're getting an error in the server that sometimes type is undefined, and that's something the system can't recover from, so we now look for that. "/>
								</outline>
							</outline>
						<outline text="if (headers === undefined) {">
							<outline text="headers = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (type === undefined) { //7/20/18 by DW">
							<outline text="type = &quot;text/plain&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="headers [&quot;Content-Type&quot;] = type;"/>
						<outline text="httpResponse.writeHead (code, headers);"/>
						<outline text="httpResponse.end (val);    "/>
						<outline text="logInfo.ctSecs = utils.secondsSince (logInfo.when);"/>
						<outline text="logInfo.size = val.length;"/>
						<outline text="logInfo.code = code;"/>
						<outline text="logInfo.type = type;"/>
						<outline text=""/>
						<outline text="logInfo.serverStats = {">
							<outline text="pageParkVersion: myVersion,"/>
							<outline text="whenStart: pageparkStats.whenLastStart,"/>
							<outline text="ctHits: pageparkStats.ctHits,"/>
							<outline text="ctHitsToday: pageparkStats.ctHitsToday,"/>
							<outline text="ctHitsSinceStart: pageparkStats.ctHitsSinceStart"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="notifySocketSubscribers (&quot;log&quot;, logInfo);"/>
						<outline text="}"/>
						</outline>
					<outline text="function return404 () {">
						<outline text="getTemplate (config.error404File, config.urlDefaultErrorPage, function (htmtext) {">
							<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: &quot;text/html&quot;});" isComment="true"/>
							<outline text="httpResponse.end (htmtext); " isComment="true"/>
							<outline text="httpRespond (404, &quot;text/html&quot;, htmtext);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (urlRedirectTo, flPermanent) { //7/30/15 by DW">
						<outline text="var code = (flPermanent) ? 301 : 302;"/>
						<outline text="httpRespond (code, &quot;text/plain&quot;, &quot;Redirect to &quot; + urlRedirectTo + &quot;.&quot;, {&quot;Location&quot;: urlRedirectTo})"/>
						<outline text="" isComment="true"/>
						<outline text="httpResponse.writeHead (code, {&quot;Location&quot;: urlRedirectTo, &quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
						<outline text="httpResponse.end (&quot;Redirect to &quot; + urlRedirectTo + &quot;.&quot;);    " isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function isSpecificFile (fname, specificFname) {">
						<outline text="if (utils.stringCountFields (fname, &quot;.&quot;) == 2) { //something like xxx.yyy">
							<outline text="if (utils.stringNthField (fname, &quot;.&quot;, 1).toLowerCase () == specificFname) { //something like index.wtf">
								<outline text="return (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="function findSpecificFile (folder, specificFname, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="7/16/15; 8:02:22 AM by DW">
								<outline text="Factored from findIndexFile. Made more general so we can use it to find error files too."/>
								</outline>
							</outline>
						<outline text="specificFname = specificFname.toLowerCase (); //7/16/15 by DW"/>
						<outline text="fs.readdir (folder, function (err, list) {">
							<outline text="for (var i = 0; i &lt; list.length; i++) {">
								<outline text="var fname = list [i];"/>
								<outline text="if (isSpecificFile (fname, specificFname)) {">
									<outline text="callback (folder + fname);"/>
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (utils.stringCountFields (fname, &quot;.&quot;) == 2) { //something like xxx.yyy" isComment="true">
									<outline text="if (utils.stringNthField (fname, &quot;.&quot;, 1).toLowerCase () == specificFname) { //something like index.wtf">
										<outline text="callback (folder + fname);"/>
										<outline text="return;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return404 ();"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function processResponse (path, data, config, callback) { //9/26/17 by DW">
						<outline text="Changes" isComment="true" created="Wed, 25 Aug 2021 20:42:10 GMT">
							<outline text="8/15/24; 12:21:34 PM by DW" created="Thu, 15 Aug 2024 16:21:34 GMT">
								<outline text="Put the assignment to formatParam in a try. It can crash apparently." created="Thu, 15 Aug 2024 16:21:35 GMT"/>
								</outline>
							<outline text="8/25/21; 4:42:13 PM by DW" created="Wed, 25 Aug 2021 20:42:12 GMT">
								<outline text="Allow the config.json file for the domain to set urlGlossary for outline files that do not already specify it. " created="Wed, 25 Aug 2021 20:42:14 GMT"/>
								</outline>
							</outline>
						<outline text="var formatParam; //url ends with ?format=abc -- 6/24/15 by DW"/>
						<outline text="if (parsedUrl.query.format !== undefined) {">
							<outline text="try { //8/15/24 by DW" created="Thu, 15 Aug 2024 16:22:26 GMT">
								<outline text="formatParam = parsedUrl.query.format.toLowerCase ()"/>
								<outline text="}" created="Thu, 15 Aug 2024 16:22:28 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Thu, 15 Aug 2024 16:22:29 GMT">
								<outline text="formatParam = undefined;" created="Thu, 15 Aug 2024 16:22:40 GMT"/>
								<outline text="}" created="Thu, 15 Aug 2024 16:22:33 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function getFileExtension (path) { //7/25/21 by DW">
							<outline text="var fname = utils.stringLastField (path, &quot;/&quot;);"/>
							<outline text="var ext = utils.stringLastField (fname, &quot;.&quot;);"/>
							<outline text="if (ext == fname) { //has no extension">
								<outline text="ext = config.defaultExtension;"/>
								<outline text="if (utils.beginsWith (ext, &quot;.&quot;)) {" created="Sun, 25 Jul 2021 21:38:39 GMT">
									<outline text="ext = utils.stringDelete (ext, 1, 1);" created="Sun, 25 Jul 2021 21:38:55 GMT"/>
									<outline text="}" created="Sun, 25 Jul 2021 21:38:51 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (ext.toLowerCase ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function getReturnType (path) { //7/6/18 by DW">
							<outline text="var fname = utils.stringLastField (path, &quot;/&quot;);"/>
							<outline text="var ext = utils.stringLastField (fname, &quot;.&quot;);"/>
							<outline text="if (ext == fname) { //has no extension">
								<outline text="return (config.defaultType);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return (utils.httpExt2MIME (ext));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturn (val, type) { //2/17/15 by DW">
							<outline text="callback (200, type, val.toString ());"/>
							<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: type});" isComment="true"/>
							<outline text="httpResponse.end (val.toString ());    " isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="function defaultReturn (type, data) { ">
							<outline text="callback (200, type, data);"/>
							<outline text="" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: type});" isComment="true"/>
							<outline text="httpResponse.end (data);    " isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="function checkForRedirect () { //6/6/18 by DW">
							<outline text="if (ext != &quot;json&quot;) {">
								<outline text="var jsontext = data.toString ();"/>
								<outline text="if (jsontext.length &gt; 0) {">
									<outline text="if (jsontext [0] == &quot;{&quot;) {">
										<outline text="try {">
											<outline text="var jstruct = JSON.parse (jsontext);"/>
											<outline text="var pstruct = jstruct [&quot;#pagePark&quot;];"/>
											<outline text="if (pstruct !== undefined) {">
												<outline text="if (pstruct.urlRedirect !== undefined) {">
													<outline text="returnRedirect (pstruct.urlRedirect);"/>
													<outline text="return (false); //we got it, don't continue processing the file"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //it wasn't a redirect, continue processing"/>
							<outline text="}"/>
							</outline>
						<outline text="var ext = getFileExtension (path);"/>
						<outline text="var ext = utils.stringLastField (path, &quot;.&quot;).toLowerCase ();" isComment="true"/>
						<outline text="var type = getReturnType (path); //12/4/19 by DW -- it was passing ext which was not what the routine calls for"/>
						<outline text="var type = utils.httpExt2MIME (ext);" isComment="true"/>
						<outline text="console.log (&quot;handleHttpRequest: f == &quot; + f + &quot;, type == &quot; + type);" isComment="true"/>
						<outline text="if (checkForRedirect ()) { //it wasn't a redirect file">
							<outline text="switch (ext) {">
								<outline text="case config.extScriptFiles:">
									<outline text="if (config.flProcessScriptFiles) {">
										<outline text="console.log (&quot;processResponse: path == &quot; + path); //8/25/19 by DW"/>
										<outline text="console.log (&quot;processResponse: data == &quot; + data); //8/25/19 by DW" isComment="true"/>
										<outline text="try {">
											<outline text="var val = eval (data.toString ());" created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438"/>
											<outline text="if (val !== undefined) { //2/17/15 by DW">
												<outline text="httpReturn (val.toString (), &quot;text/html&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="callback (500, &quot;text/plain&quot;, &quot;Error running &quot; + parsedUrl.pathname + &quot;: \&quot;&quot; + err.message + &quot;\&quot;&quot;);"/>
											<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
											<outline text="httpResponse.end (&quot;Error running &quot; + parsedUrl.pathname + &quot;: \&quot;&quot; + err.message + &quot;\&quot;&quot;);" isComment="true"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="defaultReturn (type, data);"/>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case config.extMarkdownFiles:">
									<outline text="if (config.flProcessMarkdownFiles) {">
										<outline text="console.log (&quot;processResponse: config == &quot; + utils.jsonStringify (config));" isComment="true"/>
										<outline text="getMarkdownTemplate (function (theTemplate) {">
											<outline text="var mdtext = data.toString (), pagetable = new Object ();"/>
											<outline text="pagetable.title = getMarkdownTitle (mdtext); //12/31/19 by DW"/>
											<outline text="if (pagetable.title === undefined) {">
												<outline text="pagetable.title = utils.stringLastField (path, &quot;/&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="pagetable.bodytext = marked (mdtext);"/>
											<outline text="pagetable.config = (config.pageParams === undefined) ? new Object () : utils.jsonStringify (config.pageParams); //12/12/19 by DW"/>
											<outline text="var s = utils.multipleReplaceAll (theTemplate, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
											<outline text="callback (200, &quot;text/html&quot;, s);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="defaultReturn (type, data);"/>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="case config.extOpmlFiles: //6/23/15 by DW">
									<outline text="var flReturnHtml = (!hasAcceptHeader (&quot;text/x-opml&quot;)) &amp;&amp; (formatParam != &quot;opml&quot;);"/>
									<outline text="if (config.flProcessOpmlFiles &amp;&amp; flReturnHtml) { //6/24/15 by DW">
										<outline text="try { //4/18/20 by DW -- XML errors should not crash the server">
											<outline text="getOpmlTemplate (function (theTemplate) {">
												<outline text="var opmltext = data.toString (), pagetable = new Object ();"/>
												<outline text="opmlToJs.parseWithError (opmltext, function (err, theOutline) {">
													<outline text="if (err) {">
														<outline text="callback (500, &quot;text/plain&quot;, &quot;There was an error processing the OPML file.&quot;); "/>
														<outline text="}"/>
														</outline>
													<outline text="else {">
														<outline text="if (config.urlGlossary !== undefined) { //8/25/21 by DW" created="Wed, 25 Aug 2021 20:40:56 GMT">
															<outline text="if (theOutline.opml.head.urlGlossary === undefined) {" created="Wed, 25 Aug 2021 20:41:12 GMT">
																<outline text="theOutline.opml.head.urlGlossary = config.urlGlossary;" created="Wed, 25 Aug 2021 20:41:37 GMT"/>
																<outline text="}" created="Wed, 25 Aug 2021 20:41:31 GMT"/>
																</outline>
															<outline text="}" created="Wed, 25 Aug 2021 20:41:06 GMT"/>
															</outline>
														<outline text="var pagetable = {">
															<outline text="bodytext: utils.jsonStringify (theOutline),"/>
															<outline text="title: utils.stringLastField (path, &quot;/&quot;),"/>
															<outline text="description: &quot;&quot;,"/>
															<outline text="image: &quot;&quot;,"/>
															<outline text="sitename: &quot;&quot;,"/>
															<outline text="url: &quot;http://&quot; + httpRequest.headers.host + httpRequest.url"/>
															<outline text="};"/>
															</outline>
														<outline text="utils.copyScalars (theOutline.opml.head, pagetable);"/>
														<outline text="var htmltext = utils.multipleReplaceAll (theTemplate, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
														<outline text="httpReturn (htmltext, &quot;text/html&quot;);"/>
														<outline text="}"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="callback (500, &quot;text/plain&quot;, err.message); "/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="defaultReturn (&quot;text/xml&quot;, data);"/>
										<outline text="}"/>
										</outline>
									<outline text="break;"/>
									</outline>
								<outline text="default:">
									<outline text="defaultReturn (type, data);"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveFile (f, config) {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="return404 ();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="processResponse (f, data, config, function (code, type, text) {">
									<outline text="httpRespond (code, type, text);"/>
									<outline text="" isComment="true"/>
									<outline text="httpResponse.writeHead (code, {&quot;Content-Type&quot;: type});" isComment="true"/>
									<outline text="httpResponse.end (text);    " isComment="true"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveFromS3 (config, parsedUrl) { //serve using S3's HTTP server">
						<outline text="var s3url = &quot;http:/&quot; + config.s3Path + parsedUrl.pathname; "/>
						<outline text="if (utils.endsWith (s3path, &quot;/&quot;)) {" isComment="true">
							<outline text="s3path += &quot;index.html&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;\nServing from S3 == &quot; + s3url + &quot;\n&quot;);"/>
						<outline text="request (s3url, function (error, response, body) {">
							<outline text="if (error) {">
								<outline text="httpRespond (500, &quot;text/plain&quot;, &quot;Error accessing S3 data: &quot; + error.message);"/>
								<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
								<outline text="httpResponse.end (&quot;Error accessing S3 data: &quot; + error.message);    " isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode == 200) {">
									<outline text="processResponse (parsedUrl.pathname, body, config, function (code, type, text) {">
										<outline text="httpRespond (code, type, text);"/>
										<outline text="httpResponse.writeHead (code, {&quot;Content-Type&quot;: type});" isComment="true"/>
										<outline text="httpResponse.end (text);    " isComment="true"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="httpRespond (response.statusCode, response.headers [&quot;content-type&quot;], body);"/>
									<outline text="httpResponse.writeHead (response.statusCode, {&quot;Content-Type&quot;: response.headers [&quot;content-type&quot;]});" isComment="true"/>
									<outline text="httpResponse.end (body);    " isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveFromS3WithPagePark (config, parsedUrl) { //serve with PagePark as the HTTP server -- 6/4/18 by DW">
						<outline text="var s3path = config.s3ServeFromPath + parsedUrl.pathname;"/>
						<outline text="console.log (&quot;serveFromS3WithPagePark: s3path == &quot; + s3path);" isComment="true"/>
						<outline text="function serveS3Object (s3path) {">
							<outline text="s3.getObject (s3path, function (err, data) {">
								<outline text="if (err) {">
									<outline text="s3.folderExists (s3path, function (flExists) {">
										<outline text="if (flExists) {">
											<outline text="returnRedirect (httpRequest.url + &quot;/&quot;); "/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="return404 ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="console.log (&quot;serveFromS3WithPagePark: error reading S3 file == &quot; + err.message);" isComment="true" created="Sat, 22 Mar 2014 16:52:18 GMT" pgfnum="39743"/>
									<outline text="var fname = utils.stringLastField (s3path, &quot;/&quot;);" isComment="true"/>
									<outline text="if (!utils.stringContains (fname, &quot;.&quot;)) {" isComment="true">
										<outline text="returnRedirect (httpRequest.url + &quot;/&quot;); "/>
										<outline text="}"/>
										</outline>
									<outline text="else {" isComment="true">
										<outline text="return404 ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="processResponse (s3path, data.Body, config, function (code, type, text) {">
										<outline text="httpRespond (code, type, text);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (utils.endsWith (s3path, &quot;/&quot;)) {">
							<outline text="var flfound = false;"/>
							<outline text="var splitpath = s3.splitPath (s3path);" created="Thu, 23 Jan 2014 17:53:43 GMT" pgfnum="36441"/>
							<outline text="var lookForPrefix = splitpath.Key;"/>
							<outline text="s3.listObjects (s3path, function (obj) {" created="Wed, 19 Mar 2014 19:59:25 GMT" pgfnum="39572">
								<outline text="if (!flfound) {">
									<outline text="if (obj.flLastObject === undefined) {" created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728">
										<outline text="console.log (obj.Key);" isComment="true"/>
										<outline text="if (utils.beginsWith (obj.Key, lookForPrefix, false)) {">
											<outline text="var fname = utils.stringDelete (obj.Key, 1, lookForPrefix.length);"/>
											<outline text="if (isSpecificFile (fname, config.indexFilename)) {">
												<outline text="serveS3Object (splitpath.Bucket + &quot;/&quot; + obj.Key);"/>
												<outline text="flfound = true;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}" created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731"/>
										</outline>
									<outline text="else {">
										<outline text="return404 ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Wed, 19 Mar 2014 19:59:50 GMT" pgfnum="39573"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="serveS3Object (s3path);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveMirrorWithPagePark (urlToServeFrom, config, parsedUrl) { //6/22/21 by DW" created="Tue, 22 Jun 2021 16:07:09 GMT">
						<outline text="Changes" isComment="true" created="Tue, 22 Jun 2021 16:13:52 GMT">
							<outline text="6/22/21; 12:13:54 PM by DW" created="Tue, 22 Jun 2021 16:13:53 GMT">
								<outline text="Different from delegateRequest in that we pass the content we got from the other address through the PagePark rendering methods." created="Tue, 22 Jun 2021 16:13:55 GMT"/>
								</outline>
							</outline>
						<outline text="var theRequest = {">
							<outline text="url: urlToServeFrom, "/>
							<outline text="encoding: null,"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: myProductName + &quot; v&quot; + myVersion"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="return404 ();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode == 200) {">
									<outline text="fs.writeFile (&quot;data/responses/&quot; + utils.stringLastField (parsedUrl.pathname, &quot;/&quot;), body.toString (), function (err) { //xxx" isComment="true" created="Tue, 22 Jun 2021 17:51:50 GMT">
										<outline text="});" created="Tue, 22 Jun 2021 18:19:00 GMT"/>
										</outline>
									<outline text="processResponse (parsedUrl.pathname, body, config, function (code, type, text) {">
										<outline text="httpRespond (code, type, text);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="httpRespond (response.statusCode, response.headers [&quot;content-type&quot;], body);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 22 Jun 2021 16:07:37 GMT"/>
						</outline>
					<outline text="function serveFromGithubRepo (config, parsedUrl) { //12/3/19 by DW">
						<outline text="Changes" isComment="true">
							<outline text="12/13/19; 11:18:26 AM by DW">
								<outline text="Now if you make a request for a github-based page with a nocache=true param, we will not use the cache. ">
									<outline text="http://pagepark.io/?nocache=true"/>
									</outline>
								</outline>
							</outline>
						<outline text="var path = config.githubServeFrom.path + parsedUrl.pathname;"/>
						<outline text="function returnIndex (theArray) {">
							<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"/>
							<outline text="function add (s) {">
								<outline text="htmltext +=  utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="add (&quot;&lt;ul class=\&quot;ulFileList\&quot;&gt;&quot;); indentlevel++;"/>
							<outline text="theArray.forEach (function (item) {">
								<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + item.path + &quot;\&quot;&gt;&quot; + item.name + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"/>
								<outline text="});"/>
								</outline>
							<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;"/>
							<outline text="processResponse (&quot;index.md&quot;, htmltext, config, function (code, type, text) {">
								<outline text="httpRespond (code, type, text);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var options = { ">
							<outline text="flCanUseCache: !utils.getBoolean (parsedUrl.query.nocache)"/>
							<outline text="}"/>
							</outline>
						<outline text="" created="Mon, 02 Oct 2023 14:17:10 GMT"/>
						<outline text="if (config.githubServeFrom.accessToken !== undefined) { //10/2/23 by DW" created="Mon, 02 Oct 2023 14:17:11 GMT">
							<outline text="options.accessToken = config.githubServeFrom.accessToken;" created="Mon, 02 Oct 2023 14:17:46 GMT"/>
							<outline text="}" created="Mon, 02 Oct 2023 14:17:29 GMT"/>
							</outline>
						<outline text="" created="Mon, 02 Oct 2023 14:17:11 GMT"/>
						<outline text="console.log (&quot;serveFromGithubRepo: options.flCanUseCache == &quot; + options.flCanUseCache + &quot;, path == &quot; + path);" isComment="true"/>
						<outline text="githubpub.getFromGitHub (config.githubServeFrom.username, config.githubServeFrom.repository, path, options, function (err, jstruct) {">
							<outline text="if (err) {">
								<outline text="return404 ();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (jstruct.content !== undefined) {">
									<outline text="var content = jstruct.content;"/>
									<outline text="if (jstruct.encoding == &quot;base64&quot;) {">
										<outline text="content = Buffer.from (content, &quot;base64&quot;); "/>
										<outline text="content = new Buffer (content, &quot;base64&quot;); " isComment="true"/>
										<outline text="}"/>
										</outline>
									<outline text="processResponse (path, content, config, function (code, type, text) {">
										<outline text="httpRespond (code, type, text);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else { //assume it's an array of file descriptors">
									<outline text="var flfound = false;"/>
									<outline text="jstruct.forEach (function (item) {">
										<outline text="if (!flfound) {">
											<outline text="var beginswith = config.indexFilename + &quot;.&quot;;"/>
											<outline text="var thisname = item.name;"/>
											<outline text="if (config.flUnicasePaths) {">
												<outline text="thisname = utils.stringLower (thisname);"/>
												<outline text="beginswith = utils.stringLower (beginswith);"/>
												<outline text="}"/>
												</outline>
											<outline text="if (utils.beginsWith (thisname, beginswith)) {">
												<outline text="parsedUrl.pathname = utils.stringDelete (item.path, 1, config.githubServeFrom.path.length);"/>
												<outline text="serveFromGithubRepo (config, parsedUrl);"/>
												<outline text="flfound = true;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="if (!flfound) {">
										<outline text="returnIndex (jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveRedirect (lowerpath, config, parsedUrl) { //7/30/15 by DW -- return true if we handled the request">
						<outline text="Changes" isComment="true">
							<outline text="4/10/20; 4:46:26 PM by DW">
								<outline text="Add support for config.mirrors "/>
								</outline>
							</outline>
						<outline text="if (config.redirects !== undefined) {">
							<outline text="for (var x in config.redirects) {">
								<outline text="if (x.toLowerCase () == lowerpath) {">
									<outline text="var urlRedirectTo = config.redirects [x];"/>
									<outline text="returnRedirect (urlRedirectTo);"/>
									<outline text="return (true);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (config.mirrors !== undefined) { //4/10/20 by DW">
							<outline text="for (var x in config.mirrors) {">
								<outline text="if (x.toLowerCase () == lowerpath) {">
									<outline text="serveMirrorWithPagePark (config.mirrors [x], config, parsedUrl)" created="Tue, 22 Jun 2021 16:48:48 GMT"/>
									<outline text="delegateRequest (config.mirrors [x]);" isComment="true"/>
									<outline text="return (true);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="function delegateRequest (urlToDelegateTo) {">
						<outline text="Changes" isComment="true" created="Mon, 05 Jul 2021 15:43:04 GMT">
							<outline text="7/5/21; 11:43:08 AM by DW" created="Mon, 05 Jul 2021 15:43:07 GMT">
								<outline text="Note to self: If PagePark is having trouble making requests of servers running on the same machine, see this thiread. " created="Mon, 05 Jul 2021 15:43:08 GMT">
									<outline text="https://github.com/scripting/pagePark/issues/17" created="Mon, 05 Jul 2021 15:43:37 GMT"/>
									</outline>
								<outline text="Net-net -- you have to add this to your restart.sh script." created="Mon, 05 Jul 2021 15:43:51 GMT">
									<outline text="sudo iptables -t nat -A OUTPUT -p tcp -o lo --dport 80 -j REDIRECT --to-ports 1339" created="Mon, 05 Jul 2021 15:44:03 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="var theRequest = {">
							<outline text="url: urlToDelegateTo,"/>
							<outline text="followRedirect: false, //5/26/15  by DW"/>
							<outline text="headers: {">
								<outline text="&quot;X-Forwarded-Host&quot;: host,"/>
								<outline text="&quot;X-Forwarded-For&quot;: httpRequest.connection.remoteAddress"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="function handleError (err) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;delegateRequest: error == &quot; + err.message); "/>
								<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
								<outline text="httpResponse.end (err.message);    " isComment="true"/>
								<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var req = httpRequest.pipe (request (theRequest));"/>
						<outline text="req.on (&quot;error&quot;, handleError);"/>
						<outline text="req.pipe (httpResponse).on (&quot;error&quot;, handleError);"/>
						<outline text="}"/>
						</outline>
					<outline text="function delegateRequest (urlToDelegateTo) {" isComment="true">
						<outline text="var theRequest = {">
							<outline text="url: urlToDelegateTo,"/>
							<outline text="followRedirect: false, //5/26/15  by DW"/>
							<outline text="headers: {">
								<outline text="&quot;X-Forwarded-Host&quot;: host,"/>
								<outline text="&quot;X-Forwarded-For&quot;: httpRequest.connection.remoteAddress"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, data) {">
							<outline text="if (!err) {">
								<outline text="var type;"/>
								<outline text="try {">
									<outline text="type = response.headers [&quot;content-type&quot;]"/>
									<outline text="}"/>
									<outline text=""/>
									</outline>
								<outline text="catch (err) {">
									<outline text="type = &quot;text/plain&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="httpRespond (response.statusCode, type, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;delegateRequest: err.message == &quot; + err.message); "/>
								<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function findMappedDomain (domain, callback) { //5/23/15 by DW">
						<outline text="Changes" isComment="true">
							<outline text="5/15/20; 2:11:32 PM by DW" isComment="true">
								<outline text="Handle mapping to domains that are apps."/>
								</outline>
							</outline>
						<outline text="for (var x in pageparkPrefs.domainMap) {">
							<outline text="if (utils.endsWith (domain, x)) {">
								<outline text="callback (pageparkPrefs.domainMap [x]); //a mapped domain, delegate to this port"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var port = thePackage.findAppWithDomain (domain);"/>
						<outline text="callback (port); //if undefined, it's one of our domains, handle it here"/>
						<outline text="" isComment="true"/>
						<outline text="callback (undefined);" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function pathParse (domainfolder, path, callback) { //11/7/17 by DW">
						<outline text="console.log (&quot;pathParse: domainfolder == &quot; + domainfolder + &quot;, path == &quot; + path);" isComment="true"/>
						<outline text="if (pageparkPrefs.flUnicasePaths) {">
							<outline text="var nomad = domainfolder, steps, flSlashAtEnd = false;"/>
							<outline text="if (utils.beginsWith (path, &quot;/&quot;)) {">
								<outline text="path = utils.stringDelete (path, 1, 1);"/>
								<outline text="}"/>
								</outline>
							<outline text="steps = path.split (&quot;/&quot;);"/>
							<outline text=""/>
							<outline text="if (steps [steps.length - 1].length == 0) {">
								<outline text="steps.pop ();"/>
								<outline text="flSlashAtEnd = true;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="console.log (steps);" isComment="true"/>
							<outline text="function doStep (ix) {">
								<outline text="if (ix &lt; steps.length) {">
									<outline text="var lowerstep = utils.stringLower (steps [ix]), flfound = false;"/>
									<outline text="if (!utils.endsWith (nomad, &quot;/&quot;)) {">
										<outline text="nomad += &quot;/&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="fs.readdir (nomad, function (err, list) {">
										<outline text="if (err) {">
											<outline text="console.log (&quot;pathParse: err.message == &quot; + err.message);" isComment="true"/>
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="for (var i = 0; i &lt; list.length; i++) {">
												<outline text="var fname = utils.stringLower (list [i]);"/>
												<outline text="if (fname == lowerstep) {">
													<outline text="nomad += list [i];"/>
													<outline text="" isComment="true"/>
													<outline text="console.log (&quot;nomad == &quot; + nomad);" isComment="true"/>
													<outline text="" isComment="true"/>
													<outline text="doStep (ix + 1);"/>
													<outline text="flfound = true;"/>
													<outline text="break;"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="if (!flfound) {">
												<outline text="var err = {">
													<outline text="};"/>
													</outline>
												<outline text="callback (err);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;\n\nFinished the walk with nomad == &quot; + nomad + &quot;\n\n&quot;);" isComment="true"/>
									<outline text="if (flSlashAtEnd) {">
										<outline text="nomad += &quot;/&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="callback (undefined, nomad);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="doStep (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, domainfolder + path);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function gatherAttributes (domainfolder, path, callback) { //12/31/19 by DW">
						<outline text="var nomad = domainfolder, steps, atts = new Object ();"/>
						<outline text="if (utils.beginsWith (path, &quot;/&quot;)) {">
							<outline text="path = utils.stringDelete (path, 1, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="steps = path.split (&quot;/&quot;);"/>
						<outline text="if (steps [steps.length - 1].length == 0) {">
							<outline text="steps.pop ();"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;gatherAttributes: steps == &quot; + utils.jsonStringify (steps));" isComment="true"/>
						<outline text="function doStep (ix) {">
							<outline text="if (ix &lt; steps.length) {">
								<outline text="var lowerstep = utils.stringLower (steps [ix]), flfound = false;"/>
								<outline text="if (!utils.endsWith (nomad, &quot;/&quot;)) {">
									<outline text="nomad += &quot;/&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="fs.readdir (nomad, function (err, list) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;gatherAttributes: err.message == &quot; + err.message);" isComment="true"/>
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="for (var i = 0; i &lt; list.length; i++) {">
											<outline text="var fname = utils.stringLower (list [i]);"/>
											<outline text="if (utils.beginsWith (fname, &quot;#&quot;)) { //it's an attribute">
												<outline text="var relpath = utils.stringDelete (nomad, 1, domainfolder.length);"/>
												<outline text="var attname = utils.stringLower (utils.stringDelete (fname, 1, 1));"/>
												<outline text="atts [attname] = domainfolder + relpath + fname;"/>
												<outline text="}"/>
												</outline>
											<outline text="if (fname == lowerstep) {">
												<outline text="nomad += list [i];"/>
												<outline text="doStep (ix + 1);"/>
												<outline text="flfound = true;"/>
												<outline text="break;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="if (!flfound) {">
											<outline text="var err = {">
												<outline text="message: &quot;Not found.&quot;"/>
												<outline text="};"/>
												</outline>
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;\n\nFinished the walk with nomad == &quot; + nomad + &quot;\n\n&quot;);" isComment="true"/>
								<outline text="console.log (&quot;gatherAttributes: atts == &quot; + utils.jsonStringify (atts));" isComment="true"/>
								<outline text="callback (undefined, atts);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doStep (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="function validatePath (path) { //12/9/19 by DW">
						<outline text="function checkPathForIllegalChars (path) {">
							<outline text="Changes" isComment="true">
								<outline text="5/10/15; 7:08:13 PM by DW">
									<outline text="* is legal."/>
									</outline>
								</outline>
							<outline text="function isIllegal (ch) {">
								<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {">
									<outline text="return (false);"/>
									<outline text="}"/>
									</outline>
								<outline text="switch (ch) {">
									<outline text="case &quot;/&quot;: case &quot;_&quot;: case &quot;-&quot;: case &quot;.&quot;:  case &quot; &quot;: case &quot;*&quot;:">
										<outline text="return (false);"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="for (var i = 0; i &lt;  pageparkPrefs.legalPathChars.length; i++) { //7/19/15 by DW -- check if they are legal on this server">
									<outline text="if (ch == pageparkPrefs.legalPathChars [i]) {">
										<outline text="return (false);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="for (var i = 0; i &lt; path.length; i++) {">
								<outline text="if (isIllegal (path [i])) {">
									<outline text="return (false);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (utils.stringContains (path, &quot;./&quot;)) {">
								<outline text="return (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="return (true);"/>
							<outline text="}"/>
							</outline>
						<outline text="function checkPathForHiddenFiles (path) { //12/9/19 by DW">
							<outline text="if (pageparkPrefs.flHiddenFilesCheck) {">
								<outline text="var splits = path.split (&quot;/&quot;), flhidden = false;"/>
								<outline text="splits.forEach (function (item) {">
									<outline text="if (utils.beginsWith (item, &quot;_&quot;)) {">
										<outline text="flhidden = true;"/>
										<outline text="console.log (&quot;checkPathForHiddenFiles: &quot; + path + &quot; is hidden.&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (!flhidden);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (checkPathForIllegalChars (path)) {">
							<outline text="return (checkPathForHiddenFiles (path));"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function configJsonCheck (f, config) { //7/28/21 by DW" created="Wed, 28 Jul 2021 17:17:08 GMT">
						<outline text="Changes" isComment="true" created="Wed, 28 Jul 2021 17:23:25 GMT">
							<outline text="7/28/21; 1:23:27 PM by DW" created="Wed, 28 Jul 2021 17:23:27 GMT">
								<outline text="Unless specifically told it's ok, don't serve config.json." created="Wed, 28 Jul 2021 17:23:28 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flServeConfigJson) { //ok to serve it" created="Wed, 28 Jul 2021 17:21:53 GMT">
							<outline text="return (true);" created="Wed, 28 Jul 2021 17:22:14 GMT"/>
							<outline text="}" created="Wed, 28 Jul 2021 17:21:58 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 28 Jul 2021 17:21:59 GMT">
							<outline text="var fname = utils.stringLower (utils.stringLastField (f, &quot;/&quot;));"/>
							<outline text="var fnameConfig = utils.stringLower (utils.stringDelete (configFname, 1, 1)); //pop off leading slash" created="Wed, 28 Jul 2021 17:20:48 GMT"/>
							<outline text="return (fname != fnameConfig);" created="Wed, 28 Jul 2021 17:17:40 GMT"/>
							<outline text="}" created="Wed, 28 Jul 2021 17:22:01 GMT"/>
							</outline>
						<outline text="}" created="Wed, 28 Jul 2021 17:17:23 GMT"/>
						</outline>
					<outline text="" created="Fri, 12 Nov 2021 14:41:26 GMT"/>
					<outline text="function isDomainValid (theDomain) { //11/12/21 by DW" created="Fri, 12 Nov 2021 14:41:26 GMT">
						<outline text="Changes" isComment="true" created="Fri, 12 Nov 2021 15:00:24 GMT">
							<outline text="11/12/21; 10:00:27 AM by DW" created="Fri, 12 Nov 2021 15:00:26 GMT">
								<outline text="Respond to a call from a local processor such as Caddy, they want to know if theDomain is one of the domains we serve. " created="Fri, 12 Nov 2021 15:00:27 GMT">
									<outline text="https://github.com/scripting/pagePark/issues/25" created="Fri, 12 Nov 2021 15:01:35 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="var requestHost = utils.stringNthField (httpRequest.headers.host, &quot;:&quot;, 1);" created="Fri, 12 Nov 2021 15:17:17 GMT"/>
						<outline text="if (requestHost == &quot;localhost&quot;) { //only accept requests from local apps" created="Fri, 12 Nov 2021 15:01:47 GMT">
							<outline text="if (theDomain === undefined) { //domain param not supplied" created="Fri, 12 Nov 2021 14:51:47 GMT">
								<outline text="httpRespond (404, &quot;text/plain&quot;, &quot;Not found&quot;);"/>
								<outline text="}" created="Fri, 12 Nov 2021 14:52:05 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 12 Nov 2021 14:54:29 GMT">
								<outline text="getDomainFolder (theDomain, function (folder, host) {" created="Fri, 12 Nov 2021 14:54:32 GMT">
									<outline text="if (host === pageparkPrefs.defaultDomanFolderName) { " created="Fri, 12 Nov 2021 14:55:18 GMT">
										<outline text="httpRespond (404, &quot;text/plain&quot;, &quot;Not found&quot;);"/>
										<outline text="}" created="Fri, 12 Nov 2021 14:55:19 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 12 Nov 2021 14:55:20 GMT">
										<outline text="httpRespond (200, &quot;text/plain&quot;, host); //yes, it's a domain we serve"/>
										<outline text="}" created="Fri, 12 Nov 2021 14:55:22 GMT"/>
										</outline>
									<outline text="});" created="Fri, 12 Nov 2021 14:54:45 GMT"/>
									</outline>
								<outline text="}" created="Fri, 12 Nov 2021 14:54:31 GMT"/>
								</outline>
							<outline text="}" created="Fri, 12 Nov 2021 15:02:00 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 12 Nov 2021 15:02:01 GMT">
							<outline text="httpRespond (403, &quot;text/plain&quot;, &quot;Forbidden&quot;);"/>
							<outline text="}" created="Fri, 12 Nov 2021 15:02:03 GMT"/>
							</outline>
						<outline text="}" created="Fri, 12 Nov 2021 14:41:34 GMT"/>
						</outline>
					<outline text="" created="Sat, 03 May 2025 16:10:55 GMT"/>
					<outline text="if (pageparkPrefs.flWebsocketsIsError) { //5/3/25 by DW" created="Sat, 03 May 2025 16:15:46 GMT">
						<outline text="if (isWebsocketRequest ()) { " created="Sat, 03 May 2025 16:09:23 GMT">
							<outline text="httpRespond (400, &quot;text/html&quot;,  &quot;This HTTP server can't handle WebSocket connections.&quot;);"/>
							<outline text="return;" created="Sat, 03 May 2025 16:12:01 GMT"/>
							<outline text="}" created="Sat, 03 May 2025 16:09:36 GMT"/>
							</outline>
						<outline text="}" created="Sat, 03 May 2025 16:15:51 GMT"/>
						</outline>
					<outline text=""/>
					<outline text="try {" created="Tue, 11 Feb 2014 23:03:53 GMT" pgfnum="37505">
						<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true), host, lowerhost, port, referrer;" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
						<outline text="var lowerpath = parsedUrl.pathname.toLowerCase ();" created="Mon, 10 Feb 2014 04:02:18 GMT" pgfnum="37342"/>
						<outline text="var remoteAddress = httpRequest.connection.remoteAddress;"/>
						<outline text="//set host, port">
							<outline text="host = httpRequest.headers.host;"/>
							<outline text="if (host === undefined) { //8/15/23 by DW" created="Tue, 15 Aug 2023 21:36:27 GMT">
								<outline text="host = &quot;&quot;;" created="Tue, 15 Aug 2023 21:36:36 GMT"/>
								<outline text="}" created="Tue, 15 Aug 2023 21:36:38 GMT"/>
								</outline>
							<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
								<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"/>
								<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="port = 80;"/>
								<outline text="}"/>
								</outline>
							<outline text="lowerhost = host.toLowerCase ();"/>
							</outline>
						<outline text="//set referrer">
							<outline text="referrer = httpRequest.headers.referer;"/>
							<outline text="if (referrer == undefined) {">
								<outline text="referrer = &quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							</outline>
						<outline text="//clean up remoteAddress -- 9/29/17 by DW">
							<outline text="if (utils.beginsWith (remoteAddress, &quot;::ffff:&quot;)) { ">
								<outline text="remoteAddress = utils.stringDelete (remoteAddress, 1, 7);"/>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="//set up logInfo  -- 9/30/17 by DW">
							<outline text="logInfo = {">
								<outline text="when: now," isComment="true"/>
								<outline text="method: httpRequest.method,"/>
								<outline text="host: host,"/>
								<outline text="port: port,"/>
								<outline text="path: parsedUrl.pathname,"/>
								<outline text="lowerpath: lowerpath,"/>
								<outline text="referrer: referrer,"/>
								<outline text="params: parsedUrl.query,"/>
								<outline text="remoteAddress: remoteAddress"/>
								<outline text="};"/>
								</outline>
							</outline>
						<outline text="//stats">
							<outline text="//hits by domain">
								<outline text="if (pageparkStats.hitsByDomain [lowerhost] == undefined) {">
									<outline text="pageparkStats.hitsByDomain [lowerhost] = 1;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="pageparkStats.hitsByDomain [lowerhost]++;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="//hits today">
								<outline text="if (!utils.sameDay (now, pageparkStats.whenLastHit)) { //day rollover">
									<outline text="pageparkStats.ctHitsToday = 0;"/>
									<outline text="}"/>
									</outline>
								</outline>
							<outline text="pageparkStats.ctHits++;"/>
							<outline text="pageparkStats.ctHitsToday++;"/>
							<outline text="pageparkStats.ctHitsSinceStart++; //9/30/17 by DW"/>
							<outline text="pageparkStats.whenLastHit = now;"/>
							<outline text="flStatsDirty = true;"/>
							</outline>
						<outline text=""/>
						<outline text="//log the request">
							<outline text="dns.reverse (remoteAddress, function (err, domains) {">
								<outline text="var client = remoteAddress;"/>
								<outline text="if (!err) {">
									<outline text="if (domains.length &gt; 0) {">
										<outline text="client = domains [0];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (client == undefined) { //1/25/15 by DW">
									<outline text="client = &quot;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + httpRequest.method + &quot; &quot; + host + &quot;:&quot; + port + &quot; &quot; + lowerpath + &quot; &quot; + referrer + &quot; &quot; + client);"/>
								<outline text="logInfo.client = client;"/>
								<outline text="});"/>
								</outline>
							</outline>
						<outline text="//handle the request">
							<outline text="findMappedDomain (host, function (thePort) {">
								<outline text="if (thePort !== undefined) {">
									<outline text="var urlRemote;"/>
									<outline text="parsedUrl.protocol = &quot;http:&quot;;"/>
									<outline text="parsedUrl.host = host + &quot;:&quot; + thePort;"/>
									<outline text="parsedUrl.hostname = host;"/>
									<outline text="parsedUrl.port = thePort;"/>
									<outline text="urlRemote = urlpack.format (parsedUrl);"/>
									<outline text="console.log (&quot;delegating: urlRemote == &quot; + urlRemote);" isComment="true"/>
									<outline text="" isComment="true"/>
									<outline text="https://nodejs.org/docs/latest/api/url.html" isComment="true">
										<outline text="delegating: urlRemote == //dave.judgment.club:5351/"/>
										<outline text="delegating: httpRequest.url == /"/>
										<outline text="delegating: parsedUrl == {">
											<outline text="&quot;protocol&quot;: null,"/>
											<outline text="&quot;slashes&quot;: null,"/>
											<outline text="&quot;auth&quot;: null,"/>
											<outline text="&quot;host&quot;: &quot;dave.judgment.club:5351&quot;,"/>
											<outline text="&quot;port&quot;: null,"/>
											<outline text="&quot;hostname&quot;: null,"/>
											<outline text="&quot;hash&quot;: null,"/>
											<outline text="&quot;search&quot;: &quot;&quot;,"/>
											<outline text="&quot;query&quot;: {},"/>
											<outline text="&quot;pathname&quot;: &quot;/&quot;,"/>
											<outline text="&quot;path&quot;: &quot;/&quot;,"/>
											<outline text="&quot;href&quot;: &quot;/&quot;"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="console.log (&quot;delegating: httpRequest.url == &quot; + httpRequest.url);" isComment="true"/>
									<outline text="console.log (&quot;delegating: parsedUrl == &quot; + JSON.stringify (parsedUrl, undefined, 4));" isComment="true"/>
									<outline text="" isComment="true">
										<outline text="delegating: urlRemote == http://twitter.radio3.io:5342/connect?redirect_url=http%3A%2F%2Fradio3.io%2Fdev2.html"/>
										<outline text="delegating: httpRequest.url == /connect?redirect_url=http%3A%2F%2Fradio3.io%2Fdev2.html"/>
										<outline text="delegating: parsedUrl == {">
											<outline text="&quot;protocol&quot;: &quot;http:&quot;,"/>
											<outline text="&quot;slashes&quot;: null,"/>
											<outline text="&quot;auth&quot;: null,"/>
											<outline text="&quot;host&quot;: &quot;twitter.radio3.io:5342&quot;,"/>
											<outline text="&quot;port&quot;: 5342,"/>
											<outline text="&quot;hostname&quot;: &quot;twitter.radio3.io&quot;,"/>
											<outline text="&quot;hash&quot;: null,"/>
											<outline text="&quot;search&quot;: &quot;?redirect_url=http%3A%2F%2Fradio3.io%2Fdev2.html&quot;,"/>
											<outline text="&quot;query&quot;: {">
												<outline text="&quot;redirect_url&quot;: &quot;http://radio3.io/dev2.html&quot;"/>
												</outline>
											<outline text="},"/>
											<outline text="&quot;pathname&quot;: &quot;/connect&quot;,"/>
											<outline text="&quot;path&quot;: &quot;/connect?redirect_url=http%3A%2F%2Fradio3.io%2Fdev2.html&quot;,"/>
											<outline text="&quot;href&quot;: &quot;/connect?redirect_url=http%3A%2F%2Fradio3.io%2Fdev2.html&quot;"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="delegateRequest (urlRemote);"/>
									<outline text="}"/>
									</outline>
								<outline text="else { //no mapping, we handle the request">
									<outline text="getDomainFolder (host, function (domainfolder, actualhost) { //might be a wildcard folder">
										<outline text="pathParse (domainfolder, parsedUrl.pathname, function (err, f) { //handles unicase paths via folder diving">
											<outline text="if (f === undefined) {">
												<outline text="f = domainfolder + parsedUrl.pathname;"/>
												<outline text="}"/>
												</outline>
											<outline text="if (validatePath (f)) {">
												<outline text="utils.sureFilePath (domainsPath, function () { //make sure domains folder exists">
													<outline text="getConfigFile (actualhost, function (configForThisDomain) { //get config.json, if it exists -- 1/18/15 by DW">
														<outline text="config = (configForThisDomain === undefined) ? new Object () : configForThisDomain; //set a global to this request -- 12/10/19 by DW"/>
														<outline text="if (configJsonCheck (f, config)) { //7/28/21 by DW" created="Wed, 28 Jul 2021 17:15:41 GMT">
															<outline text="gatherAttributes (domainfolder, parsedUrl.pathname, function (err, atts) { //12/31/19 by DW">
																<outline text="if (atts !== undefined) { //1/2/20 by DW -- this is all we do with atts for now">
																	<outline text="config.mdTemplatePath = atts [&quot;mdtemplate.html&quot;]; "/>
																	<outline text="config.opmlTemplatePath = atts [&quot;opmltemplate.html&quot;]; "/>
																	<outline text="}"/>
																	</outline>
																<outline text="runFilterScript (actualhost, function (flRanScript) { //3/23/20 by DW">
																	<outline text="if (!flRanScript) {">
																		<outline text="if (config.jsSiteRedirect != undefined) { //7/7/15 by DW">
																			<outline text="console.log (&quot;config.jsSiteRedirect == &quot; + config.jsSiteRedirect);" isComment="true"/>
																			<outline text="try {">
																				<outline text="var urlRedirect = eval (config.jsSiteRedirect.toString ());" created="Thu, 23 Jan 2014 16:59:39 GMT" pgfnum="36438"/>
																				<outline text="console.log (&quot;urlRedirect == &quot; + urlRedirect);" isComment="true"/>
																				<outline text="returnRedirect (urlRedirect.toString (), false); //9/30/17 by DW"/>
																				<outline text="httpResponse.writeHead (302, {&quot;Location&quot;: urlRedirect.toString (), &quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
																				<outline text="httpResponse.end (&quot;Temporary redirect to &quot; + urlRedirect + &quot;.&quot;);    " isComment="true"/>
																				<outline text="}"/>
																				</outline>
																			<outline text="catch (err) {">
																				<outline text="httpRespond (500, &quot;text/plain&quot;, &quot;Error running &quot; + config.jsSiteRedirect + &quot;: \&quot;&quot; + err.message + &quot;\&quot;&quot;);"/>
																				<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
																				<outline text="httpResponse.end (&quot;Error running &quot; + config.jsSiteRedirect + &quot;: \&quot;&quot; + err.message + &quot;\&quot;&quot;);" isComment="true"/>
																				<outline text="}"/>
																				</outline>
																			<outline text="return; "/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.urlSiteRedirect != undefined) {">
																			<outline text="var urlRedirect = config.urlSiteRedirect + parsedUrl.pathname;"/>
																			<outline text="httpResponse.writeHead (302, {&quot;Location&quot;: urlRedirect, &quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
																			<outline text="httpResponse.end (&quot;Temporary redirect to &quot; + urlRedirect + &quot;.&quot;);    " isComment="true"/>
																			<outline text="returnRedirect (urlRedirect.toString (), false); //9/30/17 by DW"/>
																			<outline text="return; "/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.urlSiteContents != undefined) { //4/26/15 by DW -- v0.55">
																			<outline text="delegateRequest (config.urlSiteContents + httpRequest.url);"/>
																			<outline text="return; "/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.fargoS3Path != undefined) { //5/11/15 PM by DW v0.58">
																			<outline text="var firstPartOfHost = utils.stringNthField (host, &quot;.&quot;, 1); //if it's dave.smallpict.com, this value is &quot;dave&quot;"/>
																			<outline text="var s3url = &quot;http:/&quot; + config.fargoS3Path + firstPartOfHost + parsedUrl.pathname; //xxx"/>
																			<outline text="if (utils.endsWith (s3path, &quot;/&quot;)) {" isComment="true">
																				<outline text="s3path += &quot;index.html&quot;;"/>
																				<outline text="}"/>
																				</outline>
																			<outline text="console.log (&quot;\nServing from S3 == &quot; + s3url + &quot;\n&quot;);" isComment="true"/>
																			<outline text="request (s3url, function (error, response, body) {">
																				<outline text="if (error) {">
																					<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
																					<outline text="httpResponse.end (&quot;Error accessing S3 data: &quot; + error.message);    " isComment="true"/>
																					<outline text="httpRespond (500, &quot;text/plain&quot;, &quot;Error accessing S3 data: &quot; + error.message);"/>
																					<outline text="}"/>
																					</outline>
																				<outline text="else {">
																					<outline text="httpRespond (response.statusCode, response.headers [&quot;content-type&quot;], body);"/>
																					<outline text="httpResponse.writeHead (response.statusCode, {&quot;Content-Type&quot;: response.headers [&quot;content-type&quot;]});" isComment="true"/>
																					<outline text="httpResponse.end (body);    " isComment="true"/>
																					<outline text="}"/>
																					</outline>
																				<outline text="});"/>
																				</outline>
																			<outline text="return;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.s3Path != undefined) { //9/26/17 by DW">
																			<outline text="serveFromS3 (config, parsedUrl);"/>
																			<outline text="return;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.s3ServeFromPath != undefined) { //6/4/18 by DW">
																			<outline text="serveFromS3WithPagePark (config, parsedUrl);"/>
																			<outline text="return;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.githubServeFrom != undefined) { //12/3/19 by DW">
																			<outline text="serveFromGithubRepo (config, parsedUrl);"/>
																			<outline text="return;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="if (config.localPath != undefined) { //9/26/17 by DW">
																			<outline text="var localFile = config.localPath + parsedUrl.pathname;"/>
																			<outline text="console.log (&quot;localFile == &quot; + localFile);"/>
																			<outline text="serveFile (localFile, config);"/>
																			<outline text="return;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="fs.stat (f, function (err, stats) {">
																			<outline text="if (err) {">
																				<outline text="switch (lowerpath) {">
																					<outline text="case &quot;/version&quot;:" created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
																						<outline text="httpRespond (200, &quot;text/plain&quot;, myVersion);"/>
																						<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
																						<outline text="httpResponse.end (myVersion);    " isComment="true"/>
																						<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
																						</outline>
																					<outline text="case &quot;/now&quot;: " created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
																						<outline text="httpRespond (200, &quot;text/plain&quot;, now.toString ());"/>
																						<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
																						</outline>
																					<outline text="case &quot;/status&quot;: " created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
																						<outline text="var status = {">
																							<outline text="prefs: pageparkPrefs,"/>
																							<outline text="status: pageparkStats"/>
																							<outline text="}"/>
																							</outline>
																						<outline text="httpRespond (200, &quot;text/plain&quot;, utils.jsonStringify (status));"/>
																						<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
																						</outline>
																					<outline text="case &quot;/freediskspace&quot;: //12/20/19 by DW">
																						<outline text="getDiskSpace (function (err, stats) {">
																							<outline text="httpRespond (200, &quot;application/json&quot;, utils.jsonStringify (stats));"/>
																							<outline text="});"/>
																							</outline>
																						<outline text="break;"/>
																						</outline>
																					<outline text="case &quot;/isdomainvalid&quot;: //11/12/21 by DW" created="Fri, 12 Nov 2021 14:39:48 GMT">
																						<outline text="isDomainValid (parsedUrl.query.domain);" created="Fri, 12 Nov 2021 14:40:11 GMT"/>
																						<outline text="break;" created="Fri, 12 Nov 2021 14:40:01 GMT"/>
																						</outline>
																					<outline text="default:">
																						<outline text="if (!serveRedirect (lowerpath, config, parsedUrl)) { //12/8/15 by DW -- it wasn't a redirect">
																							<outline text="return404 (); "/>
																							<outline text="}"/>
																							</outline>
																						<outline text="break;"/>
																						</outline>
																					<outline text="}"/>
																					</outline>
																				<outline text="}"/>
																				</outline>
																			<outline text="else {">
																				<outline text="if (!serveRedirect (lowerpath, config, parsedUrl)) { //7/30/15 by DW -- it wasn't a redirect">
																					<outline text="if (stats.isDirectory ()) {">
																						<outline text="console.log (&quot;handleHttpRequest: &quot; + f + &quot; is a folder.&quot;);" isComment="true"/>
																						<outline text="if (!utils.endsWith (f, &quot;/&quot;)) {">
																							<outline text="returnRedirect (httpRequest.url + &quot;/&quot;, false); //7/5/17 by DW"/>
																							<outline text="}"/>
																							</outline>
																						<outline text="else {">
																							<outline text="findSpecificFile (f, config.indexFilename, function (findex) {">
																								<outline text="serveFile (findex, config);"/>
																								<outline text="});"/>
																								</outline>
																							<outline text="}"/>
																							</outline>
																						<outline text="}"/>
																						</outline>
																					<outline text="else {">
																						<outline text="serveFile (f, config);"/>
																						<outline text="}"/>
																						</outline>
																					<outline text="}"/>
																					</outline>
																				<outline text="}"/>
																				</outline>
																			<outline text="});"/>
																			</outline>
																		<outline text="}"/>
																		</outline>
																	<outline text="});"/>
																	</outline>
																<outline text="});"/>
																</outline>
															<outline text="}" created="Wed, 28 Jul 2021 17:24:31 GMT"/>
															</outline>
														<outline text="else {" created="Wed, 28 Jul 2021 17:24:32 GMT">
															<outline text="return404 (); //7/28/21 by DW -- don't serve config.json"/>
															<outline text="}" created="Wed, 28 Jul 2021 17:24:33 GMT"/>
															</outline>
														<outline text="});"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="httpRespond (400, &quot;text/plain&quot;, &quot;The file name contains illegal characters.&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							</outline>
						<outline text="}" created="Tue, 11 Feb 2014 23:04:05 GMT" pgfnum="37506"/>
						</outline>
					<outline text="catch (err) {" created="Tue, 11 Feb 2014 23:04:07 GMT" pgfnum="37507">
						<outline text="httpRespond (500, &quot;text/plain&quot;, err.message);"/>
						<outline text="httpResponse.writeHead (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});" isComment="true"/>
						<outline text="httpResponse.end (err.message);    " isComment="true"/>
						<outline text="}" created="Tue, 11 Feb 2014 23:04:14 GMT" pgfnum="37508"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 03 May 2025 15:44:48 GMT"/>
				<outline text="function handleCliRequest (httpRequest, httpResponse) { //5/27/20 by DW">
					<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true), host, lowerhost, port, referrer;" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
					<outline text="var lowerpath = parsedUrl.pathname.toLowerCase ();" created="Mon, 10 Feb 2014 04:02:18 GMT" pgfnum="37342"/>
					<outline text="var remoteAddress = httpRequest.connection.remoteAddress;"/>
					<outline text="//set host, port">
						<outline text="host = httpRequest.headers.host;"/>
						<outline text="if (host === undefined) { //8/15/23 by DW" created="Tue, 15 Aug 2023 21:36:27 GMT">
							<outline text="host = &quot;&quot;;" created="Tue, 15 Aug 2023 21:36:36 GMT"/>
							<outline text="}" created="Tue, 15 Aug 2023 21:36:38 GMT"/>
							</outline>
						<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
							<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"/>
							<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="port = 80;"/>
							<outline text="}"/>
							</outline>
						<outline text="lowerhost = host.toLowerCase ();"/>
						</outline>
					<outline text="console.log (&quot;handleCliRequest: parsedUrl = &quot; + utils.jsonStringify (parsedUrl));" isComment="true"/>
					<outline text="console.log (&quot;handleCliRequest: lowerpath = &quot; + lowerpath);" isComment="true"/>
					<outline text="console.log (&quot;handleCliRequest: lowerhost = &quot; + lowerhost);" isComment="true"/>
					<outline text="console.log (&quot;handleCliRequest: remoteAddress = &quot; + utils.jsonStringify (remoteAddress));" isComment="true"/>
					<outline text="function httpRespond (code, type, val, headers) {">
						<outline text="if (headers === undefined) {">
							<outline text="headers = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (type === undefined) { //7/20/18 by DW">
							<outline text="type = &quot;text/plain&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="headers [&quot;Content-Type&quot;] = type;"/>
						<outline text="httpResponse.writeHead (code, headers);"/>
						<outline text="httpResponse.end (val);    "/>
						<outline text="}"/>
						</outline>
					<outline text="if (lowerhost != &quot;localhost&quot;) {">
						<outline text="httpRespond (403, &quot;text/plain&quot;, &quot;Forbidden&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="switch (lowerpath) {">
							<outline text="case &quot;/now&quot;:">
								<outline text="httpRespond (200, &quot;text/plain&quot;, new Date ().toString ());"/>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;/list&quot;:">
								<outline text="thePackage.getAppInfo (function (err, theInfo) {">
									<outline text="httpRespond (200, &quot;application/json&quot;, utils.jsonStringify (theInfo));"/>
									<outline text="});"/>
									</outline>
								<outline text="var appInfo = thePackage.getAppInfo ();" isComment="true"/>
								<outline text="httpRespond (200, &quot;application/json&quot;, utils.jsonStringify (appInfo));" isComment="true"/>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;/stop&quot;:">
								<outline text="thePackage.stopApp (parsedUrl.query.file, function (errrorMessage, msg) {">
									<outline text="if (errrorMessage) {">
										<outline text="console.log (&quot;stopapp error&quot;);"/>
										<outline text="httpRespond (500, &quot;text/plain&quot;, errrorMessage);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;stopapp no error&quot;);"/>
										<outline text="httpRespond (200, &quot;text/plain&quot;, msg);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;/restart&quot;:">
								<outline text="thePackage.restartApp (parsedUrl.query.file, function (errrorMessage, msg) {">
									<outline text="if (errrorMessage) {">
										<outline text="console.log (&quot;stopapp error&quot;);" isComment="true"/>
										<outline text="httpRespond (500, &quot;text/plain&quot;, errrorMessage);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;stopapp no error&quot;);" isComment="true"/>
										<outline text="httpRespond (200, &quot;text/plain&quot;, msg);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="httpRespond (200, &quot;text/plain&quot;, &quot;app restarted&quot;);" isComment="true"/>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;/rescan&quot;: //7/4/20 by DW">
								<outline text="thePackage.startPersistentApps (function (launchList) { //returns the list of apps we tried to launch">
									<outline text="httpRespond (200, &quot;application/json&quot;, utils.jsonStringify (launchList));"/>
									<outline text="});"/>
									</outline>
								<outline text="return;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="httpRespond (404, &quot;text/plain&quot;, &quot;Not found&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeStats (fname, stats, callback) {">
					<outline text="var f = getFullFilePath (fname);"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="console.log (&quot;writeStats: &quot; + f + &quot; data == &quot; + utils.jsonStringify (stats));" isComment="true"/>
						<outline text="fs.writeFile (f, utils.jsonStringify (stats), function (err) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;writeStats: error == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (fname, stats, callback) {">
					<outline text="var f = getFullFilePath (fname);"/>
					<outline text="console.log (&quot;readStats: reading stats from &quot; + f);" isComment="true"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="fs.exists (f, function (flExists) {">
							<outline text="console.log (&quot;readStats: does &quot; + fname + &quot; exist? &quot; + flExists);" isComment="true"/>
							<outline text="if (flExists) {">
								<outline text="fs.readFile (f, function (err, data) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;readStats: error reading file &quot; + f + &quot; == &quot; + err.message)"/>
										<outline text="if (callback != undefined) {">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var storedStats;"/>
										<outline text="try {">
											<outline text="storedStats = JSON.parse (data.toString ());" created="Tue, 11 Jun 2013 13:43:44 GMT" pgfnum="25734"/>
											<outline text="for (var x in storedStats) {">
												<outline text="stats [x] = storedStats [x];"/>
												<outline text="}"/>
												</outline>
											<outline text="writeStats (fname, stats, function () {">
												<outline text="if (callback != undefined) {">
													<outline text="callback ();"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="console.log (&quot;readStats: error parsing file &quot; + f + &quot; == &quot; + err.message)"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="writeStats (fname, stats, function () {">
									<outline text="if (callback != undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () { //7/17/17 by DW">
					<outline text="var now = new Date ();"/>
					<outline text="if (now.getMinutes () == 0) { //4/18/20 by DW -- only show status message at top of the hour">
						<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + now.toLocaleTimeString () + &quot;, port == &quot; + pageparkPrefs.myPort + &quot;.\n&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (flStatsDirty) {">
						<outline text="writeStats (fnameStats, pageparkStats);"/>
						<outline text="flStatsDirty = false;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="Changes" isComment="true">
						<outline text="7/17/17; 10:20:47 AM by DW">
							<outline text="Schedule the everyMinute script. No longer save stats every second, it's done in everyMinute."/>
							</outline>
						</outline>
					<outline text="var now = new Date ();"/>
					<outline text="if (!flEveryMinuteScheduled) {">
						<outline text="if (now.getSeconds () == 0) {">
							<outline text="flEveryMinuteScheduled = true;"/>
							<outline text="setInterval (everyMinute, 60000); "/>
							<outline text="everyMinute (); //do one right now"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="function initGithubpub () { //12/12/19 by DW">
						<outline text="var gitconfig = {">
							<outline text="maxCacheSecs: pageparkPrefs.ctGithubCacheSecs"/>
							<outline text="};"/>
							</outline>
						<outline text="githubpub.init (gitconfig, false);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getTopLevelPrefs (callback) { //6/7/17 by DW -- first look for config.json, then prefs/prefs.json">
						<outline text="Changes" isComment="true">
							<outline text="6/7/17; 6:31:34 PM by DW">
								<outline text="Implement a corner-turn away from prefs.json. We want a top-level config.json like all our other apps."/>
								</outline>
							</outline>
						<outline text="const newFnameConfig = &quot;config.json&quot;, oldFnameConfig = &quot;prefs/prefs.json&quot;;"/>
						<outline text="fs.exists (newFnameConfig, function (flExists) {">
							<outline text="function readFrom (fname) {">
								<outline text="console.log (&quot;\ngetTopLevelPrefs: fname == &quot; + fname);" isComment="true"/>
								<outline text="readStats (fname, pageparkPrefs, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (flExists) {">
								<outline text="readFrom (newFnameConfig);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="fs.exists (oldFnameConfig, function (flExists) {">
									<outline text="if (flExists) {">
										<outline text="readFrom (oldFnameConfig);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="readFrom (newFnameConfig);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="getTopLevelPrefs (function () {">
						<outline text="const environment = {">
							<outline text="serverAppFolder: __dirname, "/>
							<outline text="dataFolder: __dirname + &quot;/data/&quot;,"/>
							<outline text="logsFolder: &quot;/tmp/logs/&quot;"/>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + pageparkPrefs.myPort + &quot;.\n&quot;); "/>
						<outline text="thePackage.start (environment, pageparkPrefs, function () { //5/6/20 by DW">
							<outline text="if (process.env.PORT) { //4/18/20 by DW -- this is how Glitch and Heroku tell us what port to run on">
								<outline text="pageparkPrefs.myPort = process.env.PORT;"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;startup: __dirname == &quot; + __dirname);"/>
							<outline text="console.log (&quot;startup: pageparkPrefs == &quot; + utils.jsonStringify (pageparkPrefs));"/>
							<outline text="readStats (fnameStats, pageparkStats, function () {">
								<outline text="utils.sureFilePath (getFullFilePath (domainsPath) + &quot;x&quot;, function () { //make sure domains folder exists">
									<outline text="var now = new Date ();"/>
									<outline text="pageparkStats.ctStarts++;"/>
									<outline text="pageparkStats.whenLastStart = now;"/>
									<outline text="pageparkStats.ctHitsSinceStart = 0; //9/30/17 by DW"/>
									<outline text="flStatsDirty = true;"/>
									<outline text="initGithubpub (); //12/12/19 by DW"/>
									<outline text="http.createServer (handleHttpRequest).listen (pageparkPrefs.myPort);"/>
									<outline text=""/>
									<outline text="if (pageparkPrefs.flCliPortEnabled) { //5/27/20 by DW">
										<outline text="http.createServer (handleCliRequest).listen (pageparkPrefs.cliPort);"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="webSocketStartup (); //9/29/17 by DW"/>
									<outline text="console.log (&quot;&quot;); console.log (myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + pageparkPrefs.myPort + &quot;.&quot;); console.log (&quot;&quot;);" isComment="true"/>
									<outline text="setInterval (everySecond, 1000); "/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="prefs/scripts/everysecond/hello.js" isComment="true">
				<outline text="console.log (&quot;Hello world.&quot;);"/>
				</outline>
			<outline text="prefs/scripts/everysecond/counter.js" isComment="true">
				<outline text="if (localStorage.ctsecs === undefined) {">
					<outline text="localStorage.ctsecs = 0;"/>
					<outline text="}"/>
					</outline>
				<outline text="console.log (localStorage.ctsecs);"/>
				<outline text="return (localStorage.ctsecs++);"/>
				</outline>
			<outline text="prefs/scripts/everysecond/runshellscript.js" isComment="true">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="var whenstart = new Date ();"/>
				<outline text="console.log (new Date ().toLocaleString () + &quot;: &quot; + system.unixShellCommand (&quot;pwd&quot;));"/>
				<outline text="localStorage.runShellScript = {">
					<outline text="when: new Date ().toLocaleString (),"/>
					<outline text="howLongSecs: utils.secondsSince (whenstart)"/>
					<outline text="};"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildPagepark ()"/>
			</outline>
		</body>
	</opml>
